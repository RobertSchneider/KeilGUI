<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Bin\LPC17xx\main.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Bin\LPC17xx\main.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Wed Jan 24 22:04:42 2018
<BR><P>
<H3>Maximum Stack Usage =        464 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
GUILabel::onDraw(Rect) &rArr; GUI::drawString(Rect, unsigned short, unsigned short, const char*, ...) &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[9a]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">NMI_Handler</a><BR>
 <LI><a href="#[d]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">HardFault_Handler</a><BR>
 <LI><a href="#[e]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">MemManage_Handler</a><BR>
 <LI><a href="#[f]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">BusFault_Handler</a><BR>
 <LI><a href="#[10]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">UsageFault_Handler</a><BR>
 <LI><a href="#[11]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">SVC_Handler</a><BR>
 <LI><a href="#[12]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">DebugMon_Handler</a><BR>
 <LI><a href="#[2c]">BOD_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">BOD_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2b]">ADC_IRQHandler</a> from lib.o(i.ADC_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[f]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[37]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[31]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[d]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[20]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[30]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[33]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[e]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[c]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[35]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">PWM1_IRQHandler</a> from lib.o(i.PWM1_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">PendSV_Handler</a> from lib.o(i.PendSV_Handler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[34]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[32]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[98]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[24]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">SVC_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">SysTick_Handler</a> from lib.o(i.SysTick_Handler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">TIMER0_IRQHandler</a> from lib.o(i.TIMER0_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">TIMER1_IRQHandler</a> from lib.o(i.TIMER1_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">TIMER2_IRQHandler</a> from lib.o(i.TIMER2_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">TIMER3_IRQHandler</a> from lib.o(i.TIMER3_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">UART0_IRQHandler</a> from lib.o(i.UART0_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">UART1_IRQHandler</a> from lib.o(i.UART1_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">UART2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">UART3_IRQHandler</a> from lib.o(i.UART3_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[36]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2d]">USB_IRQHandler</a> from lib.o(i.USB_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[10]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[44]">cDevDigital::isReleased()</a> from lib.o(i._ZN11cDevDigital10isReleasedEv) referenced from lib.o(.constdata__ZTV11cDevDigital)
 <LI><a href="#[45]">cDevDigital::isActivated()</a> from lib.o(i._ZN11cDevDigital11isActivatedEv) referenced from lib.o(.constdata__ZTV11cDevDigital)
 <LI><a href="#[41]">cDevDigital::get()</a> from lib.o(i._ZN11cDevDigital3getEv) referenced from lib.o(.constdata__ZTV11cDevDigital)
 <LI><a href="#[43]">cDevDigital::isSet()</a> from lib.o(i._ZN11cDevDigital5isSetEv) referenced from lib.o(.constdata__ZTV11cDevDigital)
 <LI><a href="#[42]">cDevDigital::update()</a> from lib.o(i._ZN11cDevDigital6updateEv) referenced from lib.o(.constdata__ZTV11cDevDigital)
 <LI><a href="#[4f]">GUIPagedView::onEventHandle(IEventCaller*, GUIEvent::Event)</a> from guipagedview.o(i._ZN12GUIPagedView13onEventHandleEP12IEventCallerN8GUIEvent5EventE) referenced from guipagedview.o(.constdata__ZTV12GUIPagedView)
 <LI><a href="#[4d]">GUIPagedView::onDraw(Rect)</a> from guipagedview.o(i._ZN12GUIPagedView6onDrawE4Rect) referenced from guipagedview.o(.constdata__ZTV12GUIPagedView)
 <LI><a href="#[49]">GUIPagedView::onEvent(GUIEvent::Event, Rect)</a> from guipagedview.o(i._ZN12GUIPagedView7onEventEN8GUIEvent5EventE4Rect) referenced from guipagedview.o(.constdata__ZTV12GUIPagedView)
 <LI><a href="#[51]">IEventCaller::onHandlerSet()</a> from main.o(i._ZN12IEventCaller12onHandlerSetEv) referenced from main.o(.constdata__ZTV12IEventCaller)
 <LI><a href="#[51]">IEventCaller::onHandlerSet()</a> from main.o(i._ZN12IEventCaller12onHandlerSetEv) referenced from guibutton.o(.constdata__ZTV9GUIButton)
 <LI><a href="#[53]">cHwI2Cmaster::read(unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char)</a> from lib.o(i._ZN12cHwI2Cmaster4readEhPhhS0_h) referenced from lib.o(.constdata__ZTV12cHwI2Cmaster)
 <LI><a href="#[53]">cHwI2Cmaster::read(unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char)</a> from lib.o(i._ZN12cHwI2Cmaster4readEhPhhS0_h) referenced from lib.o(.constdata__ZTV14cHwI2Cmaster_N)
 <LI><a href="#[52]">cHwI2Cmaster::write(unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char)</a> from lib.o(i._ZN12cHwI2Cmaster5writeEhPhhS0_h) referenced from lib.o(.constdata__ZTV12cHwI2Cmaster)
 <LI><a href="#[52]">cHwI2Cmaster::write(unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char)</a> from lib.o(i._ZN12cHwI2Cmaster5writeEhPhhS0_h) referenced from lib.o(.constdata__ZTV14cHwI2Cmaster_N)
 <LI><a href="#[8b]">cHwI2Cmaster::Device::read(unsigned char)</a> from lib.o(i._ZN12cHwI2Cmaster6Device4readEh) referenced from lib.o(.constdata__ZTVN12cHwI2Cmaster6DeviceE)
 <LI><a href="#[8c]">cHwI2Cmaster::Device::read(unsigned char, unsigned char*, unsigned char)</a> from lib.o(i._ZN12cHwI2Cmaster6Device4readEhPhh) referenced from lib.o(.constdata__ZTVN12cHwI2Cmaster6DeviceE)
 <LI><a href="#[8d]">cHwI2Cmaster::Device::write(unsigned char, unsigned char)</a> from lib.o(i._ZN12cHwI2Cmaster6Device5writeEhh) referenced from lib.o(.constdata__ZTVN12cHwI2Cmaster6DeviceE)
 <LI><a href="#[8e]">cHwI2Cmaster::Device::isError()</a> from lib.o(i._ZN12cHwI2Cmaster6Device7isErrorEv) referenced from lib.o(.constdata__ZTVN12cHwI2Cmaster6DeviceE)
 <LI><a href="#[8f]">cHwSPImaster::Device::write(unsigned char*, unsigned short)</a> from lib.o(i._ZN12cHwSPImaster6Device5writeEPht) referenced from lib.o(.constdata__ZTVN12cHwSPImaster6DeviceE)
 <LI><a href="#[54]">GUIMeasurement::onEvent(GUIEvent::Event, Rect)</a> from guimeasurement.o(i._ZN14GUIMeasurement7onEventEN8GUIEvent5EventE4Rect) referenced from guimeasurement.o(.constdata__ZTV14GUIMeasurement)
 <LI><a href="#[5b]">cHwI2Cmaster_N::readByteAck()</a> from lib.o(i._ZN14cHwI2Cmaster_N11readByteAckEv) referenced from lib.o(.constdata__ZTV14cHwI2Cmaster_N)
 <LI><a href="#[5d]">cHwI2Cmaster_N::waitForAckn(unsigned char)</a> from lib.o(i._ZN14cHwI2Cmaster_N11waitForAcknEh) referenced from lib.o(.constdata__ZTV14cHwI2Cmaster_N)
 <LI><a href="#[5c]">cHwI2Cmaster_N::readByteNack()</a> from lib.o(i._ZN14cHwI2Cmaster_N12readByteNackEv) referenced from lib.o(.constdata__ZTV14cHwI2Cmaster_N)
 <LI><a href="#[58]">cHwI2Cmaster_N::stop()</a> from lib.o(i._ZN14cHwI2Cmaster_N4stopEv) referenced from lib.o(.constdata__ZTV14cHwI2Cmaster_N)
 <LI><a href="#[57]">cHwI2Cmaster_N::start()</a> from lib.o(i._ZN14cHwI2Cmaster_N5startEv) referenced from lib.o(.constdata__ZTV14cHwI2Cmaster_N)
 <LI><a href="#[59]">cHwI2Cmaster_N::sendAddr(unsigned char)</a> from lib.o(i._ZN14cHwI2Cmaster_N8sendAddrEh) referenced from lib.o(.constdata__ZTV14cHwI2Cmaster_N)
 <LI><a href="#[5a]">cHwI2Cmaster_N::writeByte(unsigned char)</a> from lib.o(i._ZN14cHwI2Cmaster_N9writeByteEh) referenced from lib.o(.constdata__ZTV14cHwI2Cmaster_N)
 <LI><a href="#[5e]">cHwSPImaster_1::transceiveByte(unsigned char)</a> from lib.o(i._ZN14cHwSPImaster_114transceiveByteEh) referenced from lib.o(.constdata__ZTV14cHwSPImaster_1)
 <LI><a href="#[63]">cHwDisplayGraphic::gotoPixelPos(unsigned short, unsigned short)</a> from lib.o(i._ZN17cHwDisplayGraphic12gotoPixelPosEtt) referenced from lib.o(.constdata__ZTV17cHwDisplayGraphic)
 <LI><a href="#[63]">cHwDisplayGraphic::gotoPixelPos(unsigned short, unsigned short)</a> from lib.o(i._ZN17cHwDisplayGraphic12gotoPixelPosEtt) referenced from lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
 <LI><a href="#[64]">cHwDisplayGraphic::putRectangle(unsigned short, unsigned short, unsigned short, unsigned short)</a> from lib.o(i._ZN17cHwDisplayGraphic12putRectangleEtttt) referenced from lib.o(.constdata__ZTV17cHwDisplayGraphic)
 <LI><a href="#[64]">cHwDisplayGraphic::putRectangle(unsigned short, unsigned short, unsigned short, unsigned short)</a> from lib.o(i._ZN17cHwDisplayGraphic12putRectangleEtttt) referenced from lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
 <LI><a href="#[60]">cHwDisplayGraphic::setBackColor(unsigned short)</a> from lib.o(i._ZN17cHwDisplayGraphic12setBackColorEt) referenced from lib.o(.constdata__ZTV17cHwDisplayGraphic)
 <LI><a href="#[60]">cHwDisplayGraphic::setBackColor(unsigned short)</a> from lib.o(i._ZN17cHwDisplayGraphic12setBackColorEt) referenced from lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
 <LI><a href="#[62]">cHwDisplayGraphic::setTextColor(unsigned short)</a> from lib.o(i._ZN17cHwDisplayGraphic12setTextColorEt) referenced from lib.o(.constdata__ZTV17cHwDisplayGraphic)
 <LI><a href="#[62]">cHwDisplayGraphic::setTextColor(unsigned short)</a> from lib.o(i._ZN17cHwDisplayGraphic12setTextColorEt) referenced from lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
 <LI><a href="#[61]">cHwDisplayGraphic::setPaintColor(unsigned short)</a> from lib.o(i._ZN17cHwDisplayGraphic13setPaintColorEt) referenced from lib.o(.constdata__ZTV17cHwDisplayGraphic)
 <LI><a href="#[61]">cHwDisplayGraphic::setPaintColor(unsigned short)</a> from lib.o(i._ZN17cHwDisplayGraphic13setPaintColorEt) referenced from lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
 <LI><a href="#[5f]">cHwDisplayGraphic::putChar(char)</a> from lib.o(i._ZN17cHwDisplayGraphic7putCharEc) referenced from lib.o(.constdata__ZTV17cHwDisplayGraphic)
 <LI><a href="#[5f]">cHwDisplayGraphic::putChar(char)</a> from lib.o(i._ZN17cHwDisplayGraphic7putCharEc) referenced from lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
 <LI><a href="#[65]">SampleEventHandler::onEventHandle(IEventCaller*, GUIEvent::Event)</a> from main.o(i._ZN18SampleEventHandler13onEventHandleEP12IEventCallerN8GUIEvent5EventE) referenced from main.o(.constdata__ZTV18SampleEventHandler)
 <LI><a href="#[66]">cDevControlEncoder::update()</a> from lib.o(i._ZN18cDevControlEncoder6updateEv) referenced from lib.o(.constdata__ZTV18cDevControlEncoder)
 <LI><a href="#[66]">cDevControlEncoder::update()</a> from lib.o(i._ZN18cDevControlEncoder6updateEv) referenced from lib.o(.constdata__ZTV26cDevControlEncoderJoystick)
 <LI><a href="#[67]">cDevControlEncoder::getCtrl()</a> from lib.o(i._ZN18cDevControlEncoder7getCtrlEv) referenced from lib.o(.constdata__ZTV18cDevControlEncoder)
 <LI><a href="#[67]">cDevControlEncoder::getCtrl()</a> from lib.o(i._ZN18cDevControlEncoder7getCtrlEv) referenced from lib.o(.constdata__ZTV26cDevControlEncoderJoystick)
 <LI><a href="#[69]">cDevDisplayGraphic::setBackColor(unsigned short)</a> from lib.o(i._ZN18cDevDisplayGraphic12setBackColorEt) referenced from lib.o(.constdata__ZTV18cDevDisplayGraphic)
 <LI><a href="#[6a]">cDevDisplayGraphic::setTextColor(unsigned short)</a> from lib.o(i._ZN18cDevDisplayGraphic12setTextColorEt) referenced from lib.o(.constdata__ZTV18cDevDisplayGraphic)
 <LI><a href="#[6c]">cDevDisplayGraphic::drawRectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</a> from lib.o(i._ZN18cDevDisplayGraphic13drawRectangleEttttt) referenced from lib.o(.constdata__ZTV18cDevDisplayGraphic)
 <LI><a href="#[68]">cDevDisplayGraphic::clear()</a> from lib.o(i._ZN18cDevDisplayGraphic5clearEv) referenced from lib.o(.constdata__ZTV18cDevDisplayGraphic)
 <LI><a href="#[6b]">cDevDisplayGraphic::drawText(unsigned short, unsigned short, const char*)</a> from lib.o(i._ZN18cDevDisplayGraphic8drawTextEttPKc) referenced from lib.o(.constdata__ZTV18cDevDisplayGraphic)
 <LI><a href="#[6d]">cDevDisplayGraphic::drawFrame(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</a> from lib.o(i._ZN18cDevDisplayGraphic9drawFrameEtttttt) referenced from lib.o(.constdata__ZTV18cDevDisplayGraphic)
 <LI><a href="#[6e]">cHwDisp_SPFD5408Bspi::clear()</a> from lib.o(i._ZN20cHwDisp_SPFD5408Bspi5clearEv) referenced from lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
 <LI><a href="#[6f]">cHwDisp_SPFD5408Bspi::setArea(unsigned short, unsigned short, unsigned short, unsigned short)</a> from lib.o(i._ZN20cHwDisp_SPFD5408Bspi7setAreaEtttt) referenced from lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
 <LI><a href="#[70]">cHwDisp_SPFD5408Bspi::setPixel(unsigned short)</a> from lib.o(i._ZN20cHwDisp_SPFD5408Bspi8setPixelEt) referenced from lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
 <LI><a href="#[71]">cHwTouch_STMPE811i2c::update()</a> from lib.o(i._ZN20cHwTouch_STMPE811i2c6updateEv) referenced from lib.o(.constdata__ZTV20cHwTouch_STMPE811i2c)
 <LI><a href="#[75]">SampleSelectEventHandler::onEventHandle(IEventCaller*, GUIEvent::Event)</a> from main.o(i._ZN24SampleSelectEventHandler13onEventHandleEP12IEventCallerN8GUIEvent5EventE) referenced from main.o(.constdata__ZTV24SampleSelectEventHandler)
 <LI><a href="#[76]">cDevControlEncoderJoystick::getIncrement()</a> from lib.o(i._ZN26cDevControlEncoderJoystick12getIncrementEv) referenced from lib.o(.constdata__ZTV26cDevControlEncoderJoystick)
 <LI><a href="#[4e]">View::onLateDraw(Rect)</a> from view.o(i._ZN4View10onLateDrawE4Rect) referenced from guipagedview.o(.constdata__ZTV12GUIPagedView)
 <LI><a href="#[4e]">View::onLateDraw(Rect)</a> from view.o(i._ZN4View10onLateDrawE4Rect) referenced from guimeasurement.o(.constdata__ZTV14GUIMeasurement)
 <LI><a href="#[4e]">View::onLateDraw(Rect)</a> from view.o(i._ZN4View10onLateDrawE4Rect) referenced from view.o(.constdata__ZTV4View)
 <LI><a href="#[4e]">View::onLateDraw(Rect)</a> from view.o(i._ZN4View10onLateDrawE4Rect) referenced from guilabel.o(.constdata__ZTV8GUILabel)
 <LI><a href="#[4e]">View::onLateDraw(Rect)</a> from view.o(i._ZN4View10onLateDrawE4Rect) referenced from guibutton.o(.constdata__ZTV9GUIButton)
 <LI><a href="#[4a]">View::shouldDraw(Rect)</a> from view.o(i._ZN4View10shouldDrawE4Rect) referenced from guipagedview.o(.constdata__ZTV12GUIPagedView)
 <LI><a href="#[4a]">View::shouldDraw(Rect)</a> from view.o(i._ZN4View10shouldDrawE4Rect) referenced from guimeasurement.o(.constdata__ZTV14GUIMeasurement)
 <LI><a href="#[4a]">View::shouldDraw(Rect)</a> from view.o(i._ZN4View10shouldDrawE4Rect) referenced from view.o(.constdata__ZTV4View)
 <LI><a href="#[4a]">View::shouldDraw(Rect)</a> from view.o(i._ZN4View10shouldDrawE4Rect) referenced from guilabel.o(.constdata__ZTV8GUILabel)
 <LI><a href="#[4a]">View::shouldDraw(Rect)</a> from view.o(i._ZN4View10shouldDrawE4Rect) referenced from guibutton.o(.constdata__ZTV9GUIButton)
 <LI><a href="#[4a]">View::shouldDraw(Rect)</a> from view.o(i._ZN4View10shouldDrawE4Rect) referenced from guiselect.o(.constdata__ZTV9GUISelect)
 <LI><a href="#[47]">View::getIsHidden()</a> from view.o(i._ZN4View11getIsHiddenEv) referenced from guipagedview.o(.constdata__ZTV12GUIPagedView)
 <LI><a href="#[47]">View::getIsHidden()</a> from view.o(i._ZN4View11getIsHiddenEv) referenced from guimeasurement.o(.constdata__ZTV14GUIMeasurement)
 <LI><a href="#[47]">View::getIsHidden()</a> from view.o(i._ZN4View11getIsHiddenEv) referenced from view.o(.constdata__ZTV4View)
 <LI><a href="#[47]">View::getIsHidden()</a> from view.o(i._ZN4View11getIsHiddenEv) referenced from guilabel.o(.constdata__ZTV8GUILabel)
 <LI><a href="#[47]">View::getIsHidden()</a> from view.o(i._ZN4View11getIsHiddenEv) referenced from guibutton.o(.constdata__ZTV9GUIButton)
 <LI><a href="#[47]">View::getIsHidden()</a> from view.o(i._ZN4View11getIsHiddenEv) referenced from guiselect.o(.constdata__ZTV9GUISelect)
 <LI><a href="#[48]">View::draw(Rect)</a> from view.o(i._ZN4View4drawE4Rect) referenced from guipagedview.o(.constdata__ZTV12GUIPagedView)
 <LI><a href="#[48]">View::draw(Rect)</a> from view.o(i._ZN4View4drawE4Rect) referenced from guimeasurement.o(.constdata__ZTV14GUIMeasurement)
 <LI><a href="#[48]">View::draw(Rect)</a> from view.o(i._ZN4View4drawE4Rect) referenced from view.o(.constdata__ZTV4View)
 <LI><a href="#[48]">View::draw(Rect)</a> from view.o(i._ZN4View4drawE4Rect) referenced from guilabel.o(.constdata__ZTV8GUILabel)
 <LI><a href="#[48]">View::draw(Rect)</a> from view.o(i._ZN4View4drawE4Rect) referenced from guibutton.o(.constdata__ZTV9GUIButton)
 <LI><a href="#[48]">View::draw(Rect)</a> from view.o(i._ZN4View4drawE4Rect) referenced from guiselect.o(.constdata__ZTV9GUISelect)
 <LI><a href="#[78]">View::onDraw(Rect)</a> from view.o(i._ZN4View6onDrawE4Rect) referenced from view.o(.constdata__ZTV4View)
 <LI><a href="#[4b]">View::redraw()</a> from view.o(i._ZN4View6redrawEv) referenced from guipagedview.o(.constdata__ZTV12GUIPagedView)
 <LI><a href="#[4b]">View::redraw()</a> from view.o(i._ZN4View6redrawEv) referenced from guimeasurement.o(.constdata__ZTV14GUIMeasurement)
 <LI><a href="#[4b]">View::redraw()</a> from view.o(i._ZN4View6redrawEv) referenced from view.o(.constdata__ZTV4View)
 <LI><a href="#[4b]">View::redraw()</a> from view.o(i._ZN4View6redrawEv) referenced from guilabel.o(.constdata__ZTV8GUILabel)
 <LI><a href="#[4b]">View::redraw()</a> from view.o(i._ZN4View6redrawEv) referenced from guibutton.o(.constdata__ZTV9GUIButton)
 <LI><a href="#[4b]">View::redraw()</a> from view.o(i._ZN4View6redrawEv) referenced from guiselect.o(.constdata__ZTV9GUISelect)
 <LI><a href="#[77]">View::onEvent(GUIEvent::Event, Rect)</a> from view.o(i._ZN4View7onEventEN8GUIEvent5EventE4Rect) referenced from view.o(.constdata__ZTV4View)
 <LI><a href="#[77]">View::onEvent(GUIEvent::Event, Rect)</a> from view.o(i._ZN4View7onEventEN8GUIEvent5EventE4Rect) referenced from guilabel.o(.constdata__ZTV8GUILabel)
 <LI><a href="#[90]">cList::Item::update()</a> from lib.o(i._ZN5cList4Item6updateEv) referenced from lib.o(.constdata__ZTVN5cList4ItemE)
 <LI><a href="#[7a]">cHwADC::isr()</a> from lib.o(i._ZN6cHwADC3isrEv) referenced from lib.o(.constdata__ZTV6cHwADC)
 <LI><a href="#[7a]">cHwADC::isr()</a> from lib.o(i._ZN6cHwADC3isrEv) referenced from lib.o(.constdata__ZTV8cHwADC_0)
 <LI><a href="#[79]">cHwADC::update()</a> from lib.o(i._ZN6cHwADC6updateEv) referenced from lib.o(.constdata__ZTV6cHwADC)
 <LI><a href="#[79]">cHwADC::update()</a> from lib.o(i._ZN6cHwADC6updateEv) referenced from lib.o(.constdata__ZTV8cHwADC_0)
 <LI><a href="#[94]">cHwPort::Pin::clr()</a> from lib.o(i._ZN7cHwPort3Pin3clrEv) referenced from lib.o(.constdata__ZTVN7cHwPort3PinE)
 <LI><a href="#[95]">cHwPort::Pin::get()</a> from lib.o(i._ZN7cHwPort3Pin3getEv) referenced from lib.o(.constdata__ZTVN7cHwPort3PinE)
 <LI><a href="#[93]">cHwPort::Pin::set(bool)</a> from lib.o(i._ZN7cHwPort3Pin3setEb) referenced from lib.o(.constdata__ZTVN7cHwPort3PinE)
 <LI><a href="#[92]">cHwPort::Pin::set()</a> from lib.o(i._ZN7cHwPort3Pin3setEv) referenced from lib.o(.constdata__ZTVN7cHwPort3PinE)
 <LI><a href="#[91]">cHwPort::Pin::setMode(cHwPort::Mode)</a> from lib.o(i._ZN7cHwPort3Pin7setModeENS_4ModeE) referenced from lib.o(.constdata__ZTVN7cHwPort3PinE)
 <LI><a href="#[55]">GUILabel::onDraw(Rect)</a> from guilabel.o(i._ZN8GUILabel6onDrawE4Rect) referenced from guimeasurement.o(.constdata__ZTV14GUIMeasurement)
 <LI><a href="#[55]">GUILabel::onDraw(Rect)</a> from guilabel.o(i._ZN8GUILabel6onDrawE4Rect) referenced from guilabel.o(.constdata__ZTV8GUILabel)
 <LI><a href="#[56]">GUILabel::setTitle(const char*)</a> from guilabel.o(i._ZN8GUILabel8setTitleEPKc) referenced from guimeasurement.o(.constdata__ZTV14GUIMeasurement)
 <LI><a href="#[56]">GUILabel::setTitle(const char*)</a> from guilabel.o(i._ZN8GUILabel8setTitleEPKc) referenced from guilabel.o(.constdata__ZTV8GUILabel)
 <LI><a href="#[7c]">cHwADC_0::startCh(unsigned char)</a> from lib.o(i._ZN8cHwADC_07startChEh) referenced from lib.o(.constdata__ZTV8cHwADC_0)
 <LI><a href="#[7b]">cHwADC_0::getResult()</a> from lib.o(i._ZN8cHwADC_09getResultEv) referenced from lib.o(.constdata__ZTV8cHwADC_0)
 <LI><a href="#[40]">cHwTimer::isrHandler()</a> from lib.o(i._ZN8cHwTimer10isrHandlerEv) referenced from lib.o(.constdata__ZTV10cHwTimer_N)
 <LI><a href="#[40]">cHwTimer::isrHandler()</a> from lib.o(i._ZN8cHwTimer10isrHandlerEv) referenced from lib.o(.constdata__ZTV8cHwTimer)
 <LI><a href="#[3e]">cHwTimer::getCycleTime()</a> from lib.o(i._ZN8cHwTimer12getCycleTimeEv) referenced from lib.o(.constdata__ZTV10cHwTimer_N)
 <LI><a href="#[3e]">cHwTimer::getCycleTime()</a> from lib.o(i._ZN8cHwTimer12getCycleTimeEv) referenced from lib.o(.constdata__ZTV8cHwTimer)
 <LI><a href="#[3f]">cHwTimer::add(cList::Item*)</a> from lib.o(i._ZN8cHwTimer3addEPN5cList4ItemE) referenced from lib.o(.constdata__ZTV10cHwTimer_N)
 <LI><a href="#[3f]">cHwTimer::add(cList::Item*)</a> from lib.o(i._ZN8cHwTimer3addEPN5cList4ItemE) referenced from lib.o(.constdata__ZTV8cHwTimer)
 <LI><a href="#[72]">cHwTouch::getPosX()</a> from lib.o(i._ZN8cHwTouch7getPosXEv) referenced from lib.o(.constdata__ZTV20cHwTouch_STMPE811i2c)
 <LI><a href="#[72]">cHwTouch::getPosX()</a> from lib.o(i._ZN8cHwTouch7getPosXEv) referenced from lib.o(.constdata__ZTV8cHwTouch)
 <LI><a href="#[73]">cHwTouch::getPosY()</a> from lib.o(i._ZN8cHwTouch7getPosYEv) referenced from lib.o(.constdata__ZTV20cHwTouch_STMPE811i2c)
 <LI><a href="#[73]">cHwTouch::getPosY()</a> from lib.o(i._ZN8cHwTouch7getPosYEv) referenced from lib.o(.constdata__ZTV8cHwTouch)
 <LI><a href="#[74]">cHwTouch::isTouched()</a> from lib.o(i._ZN8cHwTouch9isTouchedEv) referenced from lib.o(.constdata__ZTV20cHwTouch_STMPE811i2c)
 <LI><a href="#[74]">cHwTouch::isTouched()</a> from lib.o(i._ZN8cHwTouch9isTouchedEv) referenced from lib.o(.constdata__ZTV8cHwTouch)
 <LI><a href="#[7e]">GUIButton::onDraw(Rect)</a> from guibutton.o(i._ZN9GUIButton6onDrawE4Rect) referenced from guibutton.o(.constdata__ZTV9GUIButton)
 <LI><a href="#[7d]">GUIButton::onEvent(GUIEvent::Event, Rect)</a> from guibutton.o(i._ZN9GUIButton7onEventEN8GUIEvent5EventE4Rect) referenced from guibutton.o(.constdata__ZTV9GUIButton)
 <LI><a href="#[81]">GUISelect::onLateDraw(Rect)</a> from guiselect.o(i._ZN9GUISelect10onLateDrawE4Rect) referenced from guiselect.o(.constdata__ZTV9GUISelect)
 <LI><a href="#[82]">GUISelect::onHandlerSet()</a> from guiselect.o(i._ZN9GUISelect12onHandlerSetEv) referenced from guiselect.o(.constdata__ZTV9GUISelect)
 <LI><a href="#[83]">GUISelect::onEventHandle(IEventCaller*, GUIEvent::Event)</a> from guiselect.o(i._ZN9GUISelect13onEventHandleEP12IEventCallerN8GUIEvent5EventE) referenced from guiselect.o(.constdata__ZTV9GUISelect)
 <LI><a href="#[80]">GUISelect::onDraw(Rect)</a> from guiselect.o(i._ZN9GUISelect6onDrawE4Rect) referenced from guiselect.o(.constdata__ZTV9GUISelect)
 <LI><a href="#[7f]">GUISelect::onEvent(GUIEvent::Event, Rect)</a> from guiselect.o(i._ZN9GUISelect7onEventEN8GUIEvent5EventE4Rect) referenced from guiselect.o(.constdata__ZTV9GUISelect)
 <LI><a href="#[86]">IDrawable::getIsHidden()</a> from main.o(i._ZN9IDrawable11getIsHiddenEv) referenced from main.o(.constdata__ZTV9IDrawable)
 <LI><a href="#[4c]">IDrawable::onAddedToDrawable(IDrawable*)</a> from main.o(i._ZN9IDrawable17onAddedToDrawableEPS_) referenced from guipagedview.o(.constdata__ZTV12GUIPagedView)
 <LI><a href="#[4c]">IDrawable::onAddedToDrawable(IDrawable*)</a> from main.o(i._ZN9IDrawable17onAddedToDrawableEPS_) referenced from guimeasurement.o(.constdata__ZTV14GUIMeasurement)
 <LI><a href="#[4c]">IDrawable::onAddedToDrawable(IDrawable*)</a> from main.o(i._ZN9IDrawable17onAddedToDrawableEPS_) referenced from view.o(.constdata__ZTV4View)
 <LI><a href="#[4c]">IDrawable::onAddedToDrawable(IDrawable*)</a> from main.o(i._ZN9IDrawable17onAddedToDrawableEPS_) referenced from guilabel.o(.constdata__ZTV8GUILabel)
 <LI><a href="#[4c]">IDrawable::onAddedToDrawable(IDrawable*)</a> from main.o(i._ZN9IDrawable17onAddedToDrawableEPS_) referenced from guibutton.o(.constdata__ZTV9GUIButton)
 <LI><a href="#[4c]">IDrawable::onAddedToDrawable(IDrawable*)</a> from main.o(i._ZN9IDrawable17onAddedToDrawableEPS_) referenced from guiselect.o(.constdata__ZTV9GUISelect)
 <LI><a href="#[4c]">IDrawable::onAddedToDrawable(IDrawable*)</a> from main.o(i._ZN9IDrawable17onAddedToDrawableEPS_) referenced from main.o(.constdata__ZTV9IDrawable)
 <LI><a href="#[46]">IDrawable::update()</a> from main.o(i._ZN9IDrawable6updateEv) referenced from guipagedview.o(.constdata__ZTV12GUIPagedView)
 <LI><a href="#[46]">IDrawable::update()</a> from main.o(i._ZN9IDrawable6updateEv) referenced from guimeasurement.o(.constdata__ZTV14GUIMeasurement)
 <LI><a href="#[46]">IDrawable::update()</a> from main.o(i._ZN9IDrawable6updateEv) referenced from view.o(.constdata__ZTV4View)
 <LI><a href="#[46]">IDrawable::update()</a> from main.o(i._ZN9IDrawable6updateEv) referenced from guilabel.o(.constdata__ZTV8GUILabel)
 <LI><a href="#[46]">IDrawable::update()</a> from main.o(i._ZN9IDrawable6updateEv) referenced from guibutton.o(.constdata__ZTV9GUIButton)
 <LI><a href="#[46]">IDrawable::update()</a> from main.o(i._ZN9IDrawable6updateEv) referenced from guiselect.o(.constdata__ZTV9GUISelect)
 <LI><a href="#[46]">IDrawable::update()</a> from main.o(i._ZN9IDrawable6updateEv) referenced from main.o(.constdata__ZTV9IDrawable)
 <LI><a href="#[87]">cHwPort_N::setPinMode(unsigned char, cHwPort::Mode)</a> from lib.o(i._ZN9cHwPort_N10setPinModeEhN7cHwPort4ModeE) referenced from lib.o(.constdata__ZTV9cHwPort_N)
 <LI><a href="#[89]">cHwPort_N::clr(unsigned)</a> from lib.o(i._ZN9cHwPort_N3clrEj) referenced from lib.o(.constdata__ZTV9cHwPort_N)
 <LI><a href="#[8a]">cHwPort_N::get()</a> from lib.o(i._ZN9cHwPort_N3getEv) referenced from lib.o(.constdata__ZTV9cHwPort_N)
 <LI><a href="#[88]">cHwPort_N::set(unsigned)</a> from lib.o(i._ZN9cHwPort_N3setEj) referenced from lib.o(.constdata__ZTV9cHwPort_N)
 <LI><a href="#[50]">thunk{-40} to GUIPagedView::onEventHandle(IEventCaller*, GUIEvent::Event)</a> from guipagedview.o(i._ZThn40_N12GUIPagedView13onEventHandleEP12IEventCallerN8GUIEvent5EventE) referenced from guipagedview.o(.constdata__ZTV12GUIPagedView)
 <LI><a href="#[84]">thunk{-40} to GUISelect::onEventHandle(IEventCaller*, GUIEvent::Event)</a> from guiselect.o(i._ZThn40_N9GUISelect13onEventHandleEP12IEventCallerN8GUIEvent5EventE) referenced from guiselect.o(.constdata__ZTV9GUISelect)
 <LI><a href="#[85]">thunk{-44} to GUISelect::onHandlerSet()</a> from guiselect.o(i._ZThn44_N9GUISelect12onHandlerSetEv) referenced from guiselect.o(.constdata__ZTV9GUISelect)
 <LI><a href="#[3d]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 3 times from lib.o(.constdata__ZTV10cHwDisplay)
 <LI><a href="#[3d]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 2 times from lib.o(.constdata__ZTV11cDevDisplay)
 <LI><a href="#[3d]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 6 times from lib.o(.constdata__ZTV12cHwI2Cmaster)
 <LI><a href="#[3d]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 2 times from lib.o(.constdata__ZTV12cHwSPImaster)
 <LI><a href="#[3d]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced from main.o(.constdata__ZTV13IEventHandler)
 <LI><a href="#[3d]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 4 times from lib.o(.constdata__ZTV17cHwDisplayGraphic)
 <LI><a href="#[3d]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced from lib.o(.constdata__ZTV18cDevControlEncoder)
 <LI><a href="#[3d]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 3 times from lib.o(.constdata__ZTV6cHwADC)
 <LI><a href="#[3d]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 2 times from lib.o(.constdata__ZTV6cHwDAC)
 <LI><a href="#[3d]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 6 times from lib.o(.constdata__ZTV7cHwPort)
 <LI><a href="#[3d]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 2 times from lib.o(.constdata__ZTV8cHwTimer)
 <LI><a href="#[3d]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced from lib.o(.constdata__ZTV8cHwTouch)
 <LI><a href="#[3d]">__cxa_pure_virtual</a> from lib.o(i.__cxa_pure_virtual) referenced 4 times from main.o(.constdata__ZTV9IDrawable)
 <LI><a href="#[99]">__main</a> from __main.o(!!!main) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[97]">__sti___7_GUI_cpp</a> from gui.o(i.__sti___7_GUI_cpp) referenced from gui.o(.init_array)
 <LI><a href="#[96]">__sti___8_main_cpp</a> from main.o(i.__sti___8_main_cpp) referenced from main.o(.init_array)
 <LI><a href="#[3c]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[3b]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[3a]">_snputc</a> from _snputc.o(.text) referenced from __2snprintf.o(.text)
 <LI><a href="#[39]">_sputc</a> from _sputc.o(.text) referenced 2 times from c89vsprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[99]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[9e]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[178]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[179]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[9f]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[17a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[a0]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[e3]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[a2]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[a4]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[a6]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[a7]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[17b]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))

<P><STRONG><a name="[17c]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[a8]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[aa]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ab]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ac]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[ae]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[b0]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[b2]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[b3]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[b4]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[b6]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[17d]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[b8]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[ba]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[bc]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[be]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[17e]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[cb]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[17f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[c0]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[180]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[c2]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[181]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[182]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[183]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[c4]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[184]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[185]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[c5]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[186]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[187]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[188]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[189]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[c7]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[18a]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[18b]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[18c]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[18d]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[18e]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[18f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[190]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[191]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[192]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[d0]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[193]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[194]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[195]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[196]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[197]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[198]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[9d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[199]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[c8]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ca]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[19a]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[cc]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; GUIMeasurement::GUIMeasurement(Rect, unsigned short, char*, char*) &rArr; GUIMeasurement::setValue(const char*) &rArr; GUIMeasurement::setText(const char*) &rArr; GUIMeasurement::setText(char*, char*, const char*) &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[19b]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[101]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[cf]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[19c]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[d1]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[98]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))

<P><STRONG><a name="[19d]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[10a]"></a>load_context</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtos_asm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[109]"></a>save_context</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtos_asm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[d3]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUILabel::setTitle(const char*)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMeasurement::GUIMeasurement(Rect, unsigned short, char*, char*)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMeasurement::setText(char*, char*, const char*)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[d6]"></a>__c89vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, c89vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI::drawString(Rect, unsigned short, unsigned short, const char*, ...)
</UL>

<P><STRONG><a name="[d8]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUILabel::setTitle(const char*)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMeasurement::setText(char*, char*, const char*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[d9]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMeasurement::setText(char*, char*, const char*)
</UL>

<P><STRONG><a name="[da]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMeasurement::setValue(int)
</UL>

<P><STRONG><a name="[dc]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[dd]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[db]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[a9]"></a>_printf_int_dec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[e1]"></a>__printf</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[e4]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[12b]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUILabel::setTitle(const char*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUILabel::GUILabel(Rect, unsigned short, const char*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMeasurement::GUIMeasurement(Rect, unsigned short, char*, char*)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMeasurement::setText(char*, char*, const char*)
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUILabel::setTitle(const char*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMeasurement::GUIMeasurement(Rect, unsigned short, char*, char*)
</UL>

<P><STRONG><a name="[e6]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[19e]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[d2]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[d4]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1a0]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[e9]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[c1]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[eb]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[4]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[df]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[e0]"></a>_printf_int_common</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a1]"></a>_printf_charcount</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[1a2]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>_printf_fp_dec_real</STRONG> (Thumb, 628 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[d7]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>

<P><STRONG><a name="[39]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> c89vsprintf.o(.text)
<LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[f5]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[b9]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[bb]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[f6]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[b1]"></a>_printf_longlong_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[f8]"></a>_printf_longlong_oct</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[ad]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[b5]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[f9]"></a>_printf_longlong_hex</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[af]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[b7]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[a3]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[e5]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1a3]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1a7]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[e8]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[f1]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f4]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[fc]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[bd]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[bf]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[ed]"></a>_btod_etento</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f7]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[fb]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[fa]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[ea]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[c9]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[fd]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[ce]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[fe]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[ff]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[169]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[102]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[ee]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[104]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[103]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[105]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[106]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[ef]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[f0]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[107]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[2b]"></a>ADC_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lib.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PWM1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.PWM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM1_IRQHandler &rArr; cHwTimer_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PendSV_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lib.o(i.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_context
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lib.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_context
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[159]"></a>SystemInit</STRONG> (Thumb, 538 bytes, Stack size 0 bytes, lib.o(i.SystemInit))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::cSystem(unsigned char)
</UL>

<P><STRONG><a name="[16]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER0_IRQHandler &rArr; cHwTimer_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER1_IRQHandler &rArr; cHwTimer_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER2_IRQHandler &rArr; cHwTimer_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.TIMER3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER3_IRQHandler &rArr; cHwTimer_N::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>UART0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lib.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UART1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lib.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UART3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lib.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USB_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i.USB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_IRQHandler &rArr; cHwUSB_0::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13d]"></a>cHwDisplay::cHwDisplay__sub_object(unsigned char, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lib.o(i._ZN10cHwDisplayC2Ehh))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayGraphic::cHwDisplayGraphic__sub_object(cHwDisplayFont, unsigned char)
</UL>

<P><STRONG><a name="[108]"></a>cHwTimer_N::isr()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lib.o(i._ZN10cHwTimer_N3isrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwTimer_N::isr()
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_IRQHandler
</UL>

<P><STRONG><a name="[10c]"></a>cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)</STRONG> (Thumb, 312 bytes, Stack size 64 bytes, lib.o(i._ZN10cHwTimer_NC1ENS_7TimerIdEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ(IRQn)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::cList()
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[1ab]"></a>cHwTimer_N::cHwTimer_N__sub_object(cHwTimer_N::TimerId, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, lib.o(i._ZN10cHwTimer_NC1ENS_7TimerIdEj), UNUSED)

<P><STRONG><a name="[168]"></a>GUIControls::update()</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, guicontrols.o(i._ZN11GUIControls6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUIControls::update()
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>cDevDigital::isReleased()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib.o(i._ZN11cDevDigital10isReleasedEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV11cDevDigital)
</UL>
<P><STRONG><a name="[45]"></a>cDevDigital::isActivated()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib.o(i._ZN11cDevDigital11isActivatedEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV11cDevDigital)
</UL>
<P><STRONG><a name="[41]"></a>cDevDigital::get()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lib.o(i._ZN11cDevDigital3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cDevDigital::get() &rArr; cHwPort::Pin::get()
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::get()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV11cDevDigital)
</UL>
<P><STRONG><a name="[43]"></a>cDevDigital::isSet()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN11cDevDigital5isSetEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV11cDevDigital)
</UL>
<P><STRONG><a name="[42]"></a>cDevDigital::update()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lib.o(i._ZN11cDevDigital6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cDevDigital::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV11cDevDigital)
</UL>
<P><STRONG><a name="[118]"></a>cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lib.o(i._ZN11cDevDigitalC1ER7cHwPorthNS_4ModeEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool) &rArr; cHwPort::Pin::setMode(cHwPort::Mode)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::Pin(cHwPort&, unsigned char)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::setMode(cHwPort::Mode)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::set(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[1ac]"></a>cDevDigital::cDevDigital__sub_object(cHwPort&, unsigned char, cDevDigital::Mode, bool)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, lib.o(i._ZN11cDevDigitalC1ER7cHwPorthNS_4ModeEb), UNUSED)

<P><STRONG><a name="[139]"></a>cDevDisplay::cDevDisplay__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN11cDevDisplayC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplayChar::cDevDisplayChar(cHwDisplay&)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplayGraphic::cDevDisplayGraphic(cHwDisplayGraphic&)
</UL>

<P><STRONG><a name="[4f]"></a>GUIPagedView::onEventHandle(IEventCaller*, GUIEvent::Event)</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, guipagedview.o(i._ZN12GUIPagedView13onEventHandleEP12IEventCallerN8GUIEvent5EventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GUIPagedView::onEventHandle(IEventCaller*, GUIEvent::Event) &rArr; cList::operator [](unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::operator [](unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-40} to GUIPagedView::onEventHandle(IEventCaller*, GUIEvent::Event)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guipagedview.o(.constdata__ZTV12GUIPagedView)
</UL>
<P><STRONG><a name="[4d]"></a>GUIPagedView::onDraw(Rect)</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, guipagedview.o(i._ZN12GUIPagedView6onDrawE4Rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUIPagedView::onDraw(Rect) &rArr; cList::operator [](unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::operator [](unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guipagedview.o(.constdata__ZTV12GUIPagedView)
</UL>
<P><STRONG><a name="[49]"></a>GUIPagedView::onEvent(GUIEvent::Event, Rect)</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, guipagedview.o(i._ZN12GUIPagedView7onEventEN8GUIEvent5EventE4Rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GUIPagedView::onEvent(GUIEvent::Event, Rect) &rArr; View::onEvent(GUIEvent::Event, Rect)
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::onEvent(GUIEvent::Event, Rect)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::operator [](unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guipagedview.o(.constdata__ZTV12GUIPagedView)
</UL>
<P><STRONG><a name="[11b]"></a>GUIPagedView::GUIPagedView(Rect, int, View*, ...)</STRONG> (Thumb, 306 bytes, Stack size 72 bytes, main.o(i._ZN12GUIPagedViewC1E4RectiP4Viewz))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GUIPagedView::GUIPagedView(Rect, int, View*, ...) &rArr; GUIButton::GUIButton(Rect, unsigned short, char*) &rArr; GUILabel::GUILabel(Rect, unsigned short, const char*) &rArr; GUILabel::setTitle(const char*) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIButton::GUIButton(Rect, unsigned short, char*)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::View(Rect, unsigned short)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::addChild(IDrawable&)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rect::Rect(int, int, int, int)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEventHandler::IEventHandler__sub_object()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEventCaller::setCustomHandler(IEventHandler*)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::cList()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::add(cList::Item*)
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ad]"></a>GUIPagedView::GUIPagedView__sub_object(Rect, int, View*, ...)</STRONG> (Thumb, 0 bytes, Stack size 72 bytes, main.o(i._ZN12GUIPagedViewC1E4RectiP4Viewz), UNUSED)

<P><STRONG><a name="[163]"></a>IEventCaller::callHandler(GUIEvent::Event)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, guiselect.o(i._ZN12IEventCaller11callHandlerEN8GUIEvent5EventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IEventCaller::callHandler(GUIEvent::Event)
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISelect::updateSelected(GUIEvent::Event)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISelect::onHandlerSet()
</UL>

<P><STRONG><a name="[51]"></a>IEventCaller::onHandlerSet()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._ZN12IEventCaller12onHandlerSetEv))
<BR>[Address Reference Count : 2]<UL><LI> guibutton.o(.constdata__ZTV9GUIButton)
<LI> main.o(.constdata__ZTV12IEventCaller)
</UL>
<P><STRONG><a name="[122]"></a>IEventCaller::setCustomHandler(IEventHandler*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, main.o(i._ZN12IEventCaller16setCustomHandlerEP13IEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IEventCaller::setCustomHandler(IEventHandler*)
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISelect::GUISelect(Rect, unsigned short, int, char*, ...)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPagedView::GUIPagedView(Rect, int, View*, ...)
</UL>

<P><STRONG><a name="[161]"></a>IEventCaller::IEventCaller()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN12IEventCallerC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISelect::GUISelect(Rect, unsigned short, int, char*, ...)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIButton::GUIButton(Rect, unsigned short, char*)
</UL>

<P><STRONG><a name="[1ae]"></a>IEventCaller::IEventCaller__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main.o(i._ZN12IEventCallerC1Ev), UNUSED)

<P><STRONG><a name="[53]"></a>cHwI2Cmaster::read(unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, lib.o(i._ZN12cHwI2Cmaster4readEhPhhS0_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cHwI2Cmaster::read(unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::enableInterrupt()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV12cHwI2Cmaster)
<LI> lib.o(.constdata__ZTV14cHwI2Cmaster_N)
</UL>
<P><STRONG><a name="[52]"></a>cHwI2Cmaster::write(unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, lib.o(i._ZN12cHwI2Cmaster5writeEhPhhS0_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cHwI2Cmaster::write(unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::enableInterrupt()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV12cHwI2Cmaster)
<LI> lib.o(.constdata__ZTV14cHwI2Cmaster_N)
</UL>
<P><STRONG><a name="[8b]"></a>cHwI2Cmaster::Device::read(unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, lib.o(i._ZN12cHwI2Cmaster6Device4readEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cHwI2Cmaster::Device::read(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTouch_STMPE811i2c::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN12cHwI2Cmaster6DeviceE)
</UL>
<P><STRONG><a name="[8c]"></a>cHwI2Cmaster::Device::read(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, lib.o(i._ZN12cHwI2Cmaster6Device4readEhPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cHwI2Cmaster::Device::read(unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTouch_STMPE811i2c::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN12cHwI2Cmaster6DeviceE)
</UL>
<P><STRONG><a name="[8d]"></a>cHwI2Cmaster::Device::write(unsigned char, unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, lib.o(i._ZN12cHwI2Cmaster6Device5writeEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cHwI2Cmaster::Device::write(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTouch_STMPE811i2c::cHwTouch_STMPE811i2c(cHwI2Cmaster&, unsigned char, unsigned short, unsigned short)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTouch_STMPE811i2c::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN12cHwI2Cmaster6DeviceE)
</UL>
<P><STRONG><a name="[8e]"></a>cHwI2Cmaster::Device::isError()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lib.o(i._ZN12cHwI2Cmaster6Device7isErrorEv))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTouch_STMPE811i2c::update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN12cHwI2Cmaster6DeviceE)
</UL>
<P><STRONG><a name="[14f]"></a>cHwI2Cmaster::Device::Device(cHwI2Cmaster&, unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lib.o(i._ZN12cHwI2Cmaster6DeviceC1ERS_h))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTouch_STMPE811i2c::cHwTouch_STMPE811i2c(cHwI2Cmaster&, unsigned char, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[1af]"></a>cHwI2Cmaster::Device::Device__sub_object(cHwI2Cmaster&, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lib.o(i._ZN12cHwI2Cmaster6DeviceC1ERS_h), UNUSED)

<P><STRONG><a name="[134]"></a>cHwI2Cmaster::cHwI2Cmaster__sub_object(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib.o(i._ZN12cHwI2CmasterC2Eh))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwI2Cmaster_N::cHwI2Cmaster_N(cHwI2Cmaster_N::I2C_ID, cHwI2Cmaster::MODE, unsigned char)
</UL>

<P><STRONG><a name="[135]"></a>cHwPinConfig::set(cHwPinConfig::Function, unsigned)</STRONG> (Thumb, 250 bytes, Stack size 28 bytes, lib.o(i._ZN12cHwPinConfig3setENS_8FunctionEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cHwPinConfig::set(cHwPinConfig::Function, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster_1::cHwSPImaster_1(cHwSPImaster::MODE, cHwSPImaster::ClockPolPha)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwI2Cmaster_N::cHwI2Cmaster_N(cHwI2Cmaster_N::I2C_ID, cHwI2Cmaster::MODE, unsigned char)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDAC_0::cHwDAC_0()
</UL>

<P><STRONG><a name="[126]"></a>cHwSPImaster::Device::stop()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lib.o(i._ZN12cHwSPImaster6Device4stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwSPImaster::Device::stop() &rArr; cHwPort::Pin::set()
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::set()
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::write(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[127]"></a>cHwSPImaster::Device::start()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lib.o(i._ZN12cHwSPImaster6Device5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::clr()
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::write(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[8f]"></a>cHwSPImaster::Device::write(unsigned char*, unsigned short)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lib.o(i._ZN12cHwSPImaster6Device5writeEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::start()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::stop()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::enableInterrupt()
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeDat(unsigned short)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeCmd(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN12cHwSPImaster6DeviceE)
</UL>
<P><STRONG><a name="[14b]"></a>cHwSPImaster::Device::Device(const cHwSPImaster::Device&)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lib.o(i._ZN12cHwSPImaster6DeviceC1ERKS0_))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::cHwDisp_SPFD5408Bspi(cHwSPImaster::Device&, cHwPort::Pin&, cHwDisplayFont, unsigned char)
</UL>

<P><STRONG><a name="[1b0]"></a>cHwSPImaster::Device::Device__sub_object(const cHwSPImaster::Device&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lib.o(i._ZN12cHwSPImaster6DeviceC1ERKS0_), UNUSED)

<P><STRONG><a name="[128]"></a>cHwSPImaster::Device::Device(cHwSPImaster&, cHwPort&, unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, main.o(i._ZN12cHwSPImaster6DeviceC1ERS_R7cHwPorth))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cHwSPImaster::Device::Device(cHwSPImaster&, cHwPort&, unsigned char) &rArr; cHwPort::Pin::Pin(cHwPort&, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::Pin(cHwPort&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[1b1]"></a>cHwSPImaster::Device::Device__sub_object(cHwSPImaster&, cHwPort&, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, main.o(i._ZN12cHwSPImaster6DeviceC1ERS_R7cHwPorth), UNUSED)

<P><STRONG><a name="[137]"></a>cHwSPImaster::cHwSPImaster__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN12cHwSPImasterC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster_1::cHwSPImaster_1(cHwSPImaster::MODE, cHwSPImaster::ClockPolPha)
</UL>

<P><STRONG><a name="[11d]"></a>IEventHandler::IEventHandler__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN13IEventHandlerC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISelect::GUISelect(Rect, unsigned short, int, char*, ...)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPagedView::GUIPagedView(Rect, int, View*, ...)
</UL>

<P><STRONG><a name="[54]"></a>GUIMeasurement::onEvent(GUIEvent::Event, Rect)</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, guimeasurement.o(i._ZN14GUIMeasurement7onEventEN8GUIEvent5EventE4Rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GUIMeasurement::onEvent(GUIEvent::Event, Rect) &rArr; View::onEvent(GUIEvent::Event, Rect)
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::onEvent(GUIEvent::Event, Rect)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guimeasurement.o(.constdata__ZTV14GUIMeasurement)
</UL>
<P><STRONG><a name="[129]"></a>GUIMeasurement::setText(const char*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, guimeasurement.o(i._ZN14GUIMeasurement7setTextEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = GUIMeasurement::setText(const char*) &rArr; GUIMeasurement::setText(char*, char*, const char*) &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMeasurement::setText(char*, char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMeasurement::setValue(int)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMeasurement::setValue(const char*)
</UL>

<P><STRONG><a name="[12a]"></a>GUIMeasurement::setText(char*, char*, const char*)</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, guimeasurement.o(i._ZN14GUIMeasurement7setTextEPcS0_PKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GUIMeasurement::setText(char*, char*, const char*) &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMeasurement::setText(const char*)
</UL>

<P><STRONG><a name="[12c]"></a>GUIMeasurement::setValue(const char*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, guimeasurement.o(i._ZN14GUIMeasurement8setValueEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = GUIMeasurement::setValue(const char*) &rArr; GUIMeasurement::setText(const char*) &rArr; GUIMeasurement::setText(char*, char*, const char*) &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMeasurement::setText(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMeasurement::GUIMeasurement(Rect, unsigned short, char*, char*)
</UL>

<P><STRONG><a name="[12d]"></a>GUIMeasurement::setValue(int)</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, guimeasurement.o(i._ZN14GUIMeasurement8setValueEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = GUIMeasurement::setValue(int) &rArr; GUIMeasurement::setText(const char*) &rArr; GUIMeasurement::setText(char*, char*, const char*) &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMeasurement::setText(const char*)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>GUIMeasurement::GUIMeasurement(Rect, unsigned short, char*, char*)</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, main.o(i._ZN14GUIMeasurementC1E4RecttPcS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = GUIMeasurement::GUIMeasurement(Rect, unsigned short, char*, char*) &rArr; GUIMeasurement::setValue(const char*) &rArr; GUIMeasurement::setText(const char*) &rArr; GUIMeasurement::setText(char*, char*, const char*) &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMeasurement::setValue(const char*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUILabel::GUILabel(Rect, unsigned short, const char*)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b2]"></a>GUIMeasurement::GUIMeasurement__sub_object(Rect, unsigned short, char*, char*)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, main.o(i._ZN14GUIMeasurementC1E4RecttPcS1_), UNUSED)

<P><STRONG><a name="[13a]"></a>cHwDisplayFont::setChar(unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lib.o(i._ZN14cHwDisplayFont7setCharEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwDisplayFont::setChar(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayGraphic::putChar(char)
</UL>

<P><STRONG><a name="[131]"></a>cHwDisplayFont::getPixel(unsigned char, unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, lib.o(i._ZN14cHwDisplayFont8getPixelEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cHwDisplayFont::getPixel(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayFont::getCharWidth() const
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayGraphic::putChar(char)
</UL>

<P><STRONG><a name="[167]"></a>cHwDisplayFont::cHwDisplayFont(const cHwDisplayFontProperties*, const unsigned char*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lib.o(i._ZN14cHwDisplayFontC1EPK24cHwDisplayFontPropertiesPKh))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[1b3]"></a>cHwDisplayFont::cHwDisplayFont__sub_object(const cHwDisplayFontProperties*, const unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lib.o(i._ZN14cHwDisplayFontC1EPK24cHwDisplayFontPropertiesPKh), UNUSED)

<P><STRONG><a name="[5b]"></a>cHwI2Cmaster_N::readByteAck()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lib.o(i._ZN14cHwI2Cmaster_N11readByteAckEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwI2Cmaster_N::readByteAck()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV14cHwI2Cmaster_N)
</UL>
<P><STRONG><a name="[5d]"></a>cHwI2Cmaster_N::waitForAckn(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lib.o(i._ZN14cHwI2Cmaster_N11waitForAcknEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwI2Cmaster_N::waitForAckn(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV14cHwI2Cmaster_N)
</UL>
<P><STRONG><a name="[5c]"></a>cHwI2Cmaster_N::readByteNack()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lib.o(i._ZN14cHwI2Cmaster_N12readByteNackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwI2Cmaster_N::readByteNack()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV14cHwI2Cmaster_N)
</UL>
<P><STRONG><a name="[58]"></a>cHwI2Cmaster_N::stop()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lib.o(i._ZN14cHwI2Cmaster_N4stopEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV14cHwI2Cmaster_N)
</UL>
<P><STRONG><a name="[57]"></a>cHwI2Cmaster_N::start()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lib.o(i._ZN14cHwI2Cmaster_N5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwI2Cmaster_N::start()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV14cHwI2Cmaster_N)
</UL>
<P><STRONG><a name="[59]"></a>cHwI2Cmaster_N::sendAddr(unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lib.o(i._ZN14cHwI2Cmaster_N8sendAddrEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwI2Cmaster_N::sendAddr(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV14cHwI2Cmaster_N)
</UL>
<P><STRONG><a name="[5a]"></a>cHwI2Cmaster_N::writeByte(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lib.o(i._ZN14cHwI2Cmaster_N9writeByteEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwI2Cmaster_N::writeByte(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV14cHwI2Cmaster_N)
</UL>
<P><STRONG><a name="[133]"></a>cHwI2Cmaster_N::cHwI2Cmaster_N(cHwI2Cmaster_N::I2C_ID, cHwI2Cmaster::MODE, unsigned char)</STRONG> (Thumb, 142 bytes, Stack size 28 bytes, lib.o(i._ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cHwI2Cmaster_N::cHwI2Cmaster_N(cHwI2Cmaster_N::I2C_ID, cHwI2Cmaster::MODE, unsigned char) &rArr; cHwPinConfig::set(cHwPinConfig::Function, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPinConfig::set(cHwPinConfig::Function, unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwI2Cmaster::cHwI2Cmaster__sub_object(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[1b4]"></a>cHwI2Cmaster_N::cHwI2Cmaster_N__sub_object(cHwI2Cmaster_N::I2C_ID, cHwI2Cmaster::MODE, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 28 bytes, lib.o(i._ZN14cHwI2Cmaster_NC1ENS_6I2C_IDEN12cHwI2Cmaster4MODEEh), UNUSED)

<P><STRONG><a name="[5e]"></a>cHwSPImaster_1::transceiveByte(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lib.o(i._ZN14cHwSPImaster_114transceiveByteEh))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV14cHwSPImaster_1)
</UL>
<P><STRONG><a name="[136]"></a>cHwSPImaster_1::cHwSPImaster_1(cHwSPImaster::MODE, cHwSPImaster::ClockPolPha)</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, lib.o(i._ZN14cHwSPImaster_1C1EN12cHwSPImaster4MODEENS0_11ClockPolPhaE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cHwSPImaster_1::cHwSPImaster_1(cHwSPImaster::MODE, cHwSPImaster::ClockPolPha) &rArr; cHwPinConfig::set(cHwPinConfig::Function, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::cHwSPImaster__sub_object()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPinConfig::set(cHwPinConfig::Function, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[1b5]"></a>cHwSPImaster_1::cHwSPImaster_1__sub_object(cHwSPImaster::MODE, cHwSPImaster::ClockPolPha)</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, lib.o(i._ZN14cHwSPImaster_1C1EN12cHwSPImaster4MODEENS0_11ClockPolPhaE), UNUSED)

<P><STRONG><a name="[138]"></a>cDevDisplayChar::cDevDisplayChar(cHwDisplay&)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lib.o(i._ZN15cDevDisplayCharC1ER10cHwDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cDevDisplayChar::cDevDisplayChar(cHwDisplay&)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplay::cDevDisplay__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[1b6]"></a>cDevDisplayChar::cDevDisplayChar__sub_object(cHwDisplay&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lib.o(i._ZN15cDevDisplayCharC1ER10cHwDisplay), UNUSED)

<P><STRONG><a name="[63]"></a>cHwDisplayGraphic::gotoPixelPos(unsigned short, unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN17cHwDisplayGraphic12gotoPixelPosEtt))
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV17cHwDisplayGraphic)
<LI> lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
</UL>
<P><STRONG><a name="[64]"></a>cHwDisplayGraphic::putRectangle(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, lib.o(i._ZN17cHwDisplayGraphic12putRectangleEtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cHwDisplayGraphic::putRectangle(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV17cHwDisplayGraphic)
<LI> lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
</UL>
<P><STRONG><a name="[60]"></a>cHwDisplayGraphic::setBackColor(unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib.o(i._ZN17cHwDisplayGraphic12setBackColorEt))
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV17cHwDisplayGraphic)
<LI> lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
</UL>
<P><STRONG><a name="[62]"></a>cHwDisplayGraphic::setTextColor(unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib.o(i._ZN17cHwDisplayGraphic12setTextColorEt))
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV17cHwDisplayGraphic)
<LI> lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
</UL>
<P><STRONG><a name="[61]"></a>cHwDisplayGraphic::setPaintColor(unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib.o(i._ZN17cHwDisplayGraphic13setPaintColorEt))
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV17cHwDisplayGraphic)
<LI> lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
</UL>
<P><STRONG><a name="[5f]"></a>cHwDisplayGraphic::putChar(char)</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, lib.o(i._ZN17cHwDisplayGraphic7putCharEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = cHwDisplayGraphic::putChar(char) &rArr; cHwDisplayFont::getPixel(unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayFont::getPixel(unsigned char, unsigned char)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayFont::setChar(unsigned char)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayFont::getCharHeight() const
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayFont::getCharWidth() const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV17cHwDisplayGraphic)
<LI> lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
</UL>
<P><STRONG><a name="[13c]"></a>cHwDisplayGraphic::cHwDisplayGraphic__sub_object(cHwDisplayFont, unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 28 bytes, lib.o(i._ZN17cHwDisplayGraphicC2E14cHwDisplayFonth))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cHwDisplayGraphic::cHwDisplayGraphic__sub_object(cHwDisplayFont, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplay::cHwDisplay__sub_object(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::cHwDisp_SPFD5408Bspi(cHwSPImaster::Device&, cHwPort::Pin&, cHwDisplayFont, unsigned char)
</UL>

<P><STRONG><a name="[65]"></a>SampleEventHandler::onEventHandle(IEventCaller*, GUIEvent::Event)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, main.o(i._ZN18SampleEventHandler13onEventHandleEP12IEventCallerN8GUIEvent5EventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SampleEventHandler::onEventHandle(IEventCaller*, GUIEvent::Event)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTV18SampleEventHandler)
</UL>
<P><STRONG><a name="[66]"></a>cDevControlEncoder::update()</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lib.o(i._ZN18cDevControlEncoder6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cDevControlEncoder::update() &rArr; cFifo&lang;cDevControlEncoder::tEvent&rang;::operator &lang;&lang;(const cDevControlEncoder::tEvent&)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFifo&lang;cDevControlEncoder::tEvent&rang;::operator &lang;&lang;(const cDevControlEncoder::tEvent&)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFifo&lang;cDevControlEncoder::tEvent&rang;::isFull()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV18cDevControlEncoder)
<LI> lib.o(.constdata__ZTV26cDevControlEncoderJoystick)
</UL>
<P><STRONG><a name="[67]"></a>cDevControlEncoder::getCtrl()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lib.o(i._ZN18cDevControlEncoder7getCtrlEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cDevControlEncoder::getCtrl()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV18cDevControlEncoder)
<LI> lib.o(.constdata__ZTV26cDevControlEncoderJoystick)
</UL>
<P><STRONG><a name="[140]"></a>cDevControlEncoder::cDevControlEncoder__sub_object(cDevDigital*, cHwTimer*)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lib.o(i._ZN18cDevControlEncoderC2EP11cDevDigitalP8cHwTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cDevControlEncoder::cDevControlEncoder__sub_object(cDevDigital*, cHwTimer*) &rArr; operator new[] (unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::Item::Item(cList*)
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoderJoystick::cDevControlEncoderJoystick(cDevDigital*, cDevDigital*, cDevDigital*, cHwTimer*, unsigned short)
</UL>

<P><STRONG><a name="[69]"></a>cDevDisplayGraphic::setBackColor(unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lib.o(i._ZN18cDevDisplayGraphic12setBackColorEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cDevDisplayGraphic::setBackColor(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV18cDevDisplayGraphic)
</UL>
<P><STRONG><a name="[6a]"></a>cDevDisplayGraphic::setTextColor(unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lib.o(i._ZN18cDevDisplayGraphic12setTextColorEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cDevDisplayGraphic::setTextColor(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV18cDevDisplayGraphic)
</UL>
<P><STRONG><a name="[6c]"></a>cDevDisplayGraphic::drawRectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, lib.o(i._ZN18cDevDisplayGraphic13drawRectangleEttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cDevDisplayGraphic::drawRectangle(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV18cDevDisplayGraphic)
</UL>
<P><STRONG><a name="[68]"></a>cDevDisplayGraphic::clear()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lib.o(i._ZN18cDevDisplayGraphic5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cDevDisplayGraphic::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplayGraphic::cDevDisplayGraphic(cHwDisplayGraphic&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV18cDevDisplayGraphic)
</UL>
<P><STRONG><a name="[6b]"></a>cDevDisplayGraphic::drawText(unsigned short, unsigned short, const char*)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lib.o(i._ZN18cDevDisplayGraphic8drawTextEttPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cDevDisplayGraphic::drawText(unsigned short, unsigned short, const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV18cDevDisplayGraphic)
</UL>
<P><STRONG><a name="[6d]"></a>cDevDisplayGraphic::drawFrame(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, lib.o(i._ZN18cDevDisplayGraphic9drawFrameEtttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cDevDisplayGraphic::drawFrame(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV18cDevDisplayGraphic)
</UL>
<P><STRONG><a name="[143]"></a>cDevDisplayGraphic::cDevDisplayGraphic(cHwDisplayGraphic&)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lib.o(i._ZN18cDevDisplayGraphicC1ER17cHwDisplayGraphic))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cDevDisplayGraphic::cDevDisplayGraphic(cHwDisplayGraphic&) &rArr; cDevDisplayGraphic::clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplay::cDevDisplay__sub_object()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplayGraphic::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b7]"></a>cDevDisplayGraphic::cDevDisplayGraphic__sub_object(cHwDisplayGraphic&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lib.o(i._ZN18cDevDisplayGraphicC1ER17cHwDisplayGraphic), UNUSED)

<P><STRONG><a name="[144]"></a>cHwDisp_SPFD5408Bspi::init()</STRONG> (Thumb, 438 bytes, Stack size 8 bytes, lib.o(i._ZN20cHwDisp_SPFD5408Bspi4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cHwDisp_SPFD5408Bspi::init() &rArr; cHwDisp_SPFD5408Bspi::maxWindow() &rArr; cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short) &rArr; cHwDisp_SPFD5408Bspi::writeDat(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::delayMilliSec(unsigned short)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::maxWindow()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::cHwDisp_SPFD5408Bspi(cHwSPImaster::Device&, cHwPort::Pin&, cHwDisplayFont, unsigned char)
</UL>

<P><STRONG><a name="[6e]"></a>cHwDisp_SPFD5408Bspi::clear()</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lib.o(i._ZN20cHwDisp_SPFD5408Bspi5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cHwDisp_SPFD5408Bspi::clear()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
</UL>
<P><STRONG><a name="[6f]"></a>cHwDisp_SPFD5408Bspi::setArea(unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lib.o(i._ZN20cHwDisp_SPFD5408Bspi7setAreaEtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cHwDisp_SPFD5408Bspi::setArea(unsigned short, unsigned short, unsigned short, unsigned short) &rArr; cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short) &rArr; cHwDisp_SPFD5408Bspi::writeDat(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeCmd(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
</UL>
<P><STRONG><a name="[70]"></a>cHwDisp_SPFD5408Bspi::setPixel(unsigned short)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lib.o(i._ZN20cHwDisp_SPFD5408Bspi8setPixelEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cHwDisp_SPFD5408Bspi::setPixel(unsigned short) &rArr; cHwDisp_SPFD5408Bspi::writeDat(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeDat(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV20cHwDisp_SPFD5408Bspi)
</UL>
<P><STRONG><a name="[148]"></a>cHwDisp_SPFD5408Bspi::writeCmd(unsigned short)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lib.o(i._ZN20cHwDisp_SPFD5408Bspi8writeCmdEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cHwDisp_SPFD5408Bspi::writeCmd(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::write(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::setArea(unsigned short, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[149]"></a>cHwDisp_SPFD5408Bspi::writeDat(unsigned short)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lib.o(i._ZN20cHwDisp_SPFD5408Bspi8writeDatEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cHwDisp_SPFD5408Bspi::writeDat(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::write(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::setPixel(unsigned short)
</UL>

<P><STRONG><a name="[146]"></a>cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lib.o(i._ZN20cHwDisp_SPFD5408Bspi8writeRegEht))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short) &rArr; cHwDisp_SPFD5408Bspi::writeDat(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeDat(unsigned short)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeCmd(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::maxWindow()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::setArea(unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::init()
</UL>

<P><STRONG><a name="[147]"></a>cHwDisp_SPFD5408Bspi::maxWindow()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lib.o(i._ZN20cHwDisp_SPFD5408Bspi9maxWindowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cHwDisp_SPFD5408Bspi::maxWindow() &rArr; cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short) &rArr; cHwDisp_SPFD5408Bspi::writeDat(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::init()
</UL>

<P><STRONG><a name="[14a]"></a>cHwDisp_SPFD5408Bspi::cHwDisp_SPFD5408Bspi(cHwSPImaster::Device&, cHwPort::Pin&, cHwDisplayFont, unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, lib.o(i._ZN20cHwDisp_SPFD5408BspiC1ERN12cHwSPImaster6DeviceERN7cHwPort3PinE14cHwDisplayFonth))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cHwDisp_SPFD5408Bspi::cHwDisp_SPFD5408Bspi(cHwSPImaster::Device&, cHwPort::Pin&, cHwDisplayFont, unsigned char) &rArr; cHwDisp_SPFD5408Bspi::init() &rArr; cHwDisp_SPFD5408Bspi::maxWindow() &rArr; cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short) &rArr; cHwDisp_SPFD5408Bspi::writeDat(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::Device(const cHwSPImaster::Device&)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::init()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayGraphic::cHwDisplayGraphic__sub_object(cHwDisplayFont, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[1b8]"></a>cHwDisp_SPFD5408Bspi::cHwDisp_SPFD5408Bspi__sub_object(cHwSPImaster::Device&, cHwPort::Pin&, cHwDisplayFont, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, lib.o(i._ZN20cHwDisp_SPFD5408BspiC1ERN12cHwSPImaster6DeviceERN7cHwPort3PinE14cHwDisplayFonth), UNUSED)

<P><STRONG><a name="[71]"></a>cHwTouch_STMPE811i2c::update()</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, lib.o(i._ZN20cHwTouch_STMPE811i2c6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cHwTouch_STMPE811i2c::update() &rArr; cHwI2Cmaster::Device::read(unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwI2Cmaster::Device::isError()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwI2Cmaster::Device::write(unsigned char, unsigned char)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwI2Cmaster::Device::read(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwI2Cmaster::Device::read(unsigned char)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RANGE&lang;int&rang;(T1, T1, T1)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV20cHwTouch_STMPE811i2c)
</UL>
<P><STRONG><a name="[14d]"></a>cHwTouch_STMPE811i2c::cHwTouch_STMPE811i2c(cHwI2Cmaster&, unsigned char, unsigned short, unsigned short)</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, lib.o(i._ZN20cHwTouch_STMPE811i2cC1ER12cHwI2Cmasterhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cHwTouch_STMPE811i2c::cHwTouch_STMPE811i2c(cHwI2Cmaster&, unsigned char, unsigned short, unsigned short) &rArr; cSystem::delayMilliSec(unsigned short) &rArr; cSystem::delayMicroSec(unsigned short) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwI2Cmaster::Device::Device(cHwI2Cmaster&, unsigned char)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwI2Cmaster::Device::write(unsigned char, unsigned char)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTouch::cHwTouch__sub_object(unsigned short, unsigned short)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::delayMilliSec(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[1b9]"></a>cHwTouch_STMPE811i2c::cHwTouch_STMPE811i2c__sub_object(cHwI2Cmaster&, unsigned char, unsigned short, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, lib.o(i._ZN20cHwTouch_STMPE811i2cC1ER12cHwI2Cmasterhtt), UNUSED)

<P><STRONG><a name="[75]"></a>SampleSelectEventHandler::onEventHandle(IEventCaller*, GUIEvent::Event)</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, main.o(i._ZN24SampleSelectEventHandler13onEventHandleEP12IEventCallerN8GUIEvent5EventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SampleSelectEventHandler::onEventHandle(IEventCaller*, GUIEvent::Event)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTV24SampleSelectEventHandler)
</UL>
<P><STRONG><a name="[76]"></a>cDevControlEncoderJoystick::getIncrement()</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, lib.o(i._ZN26cDevControlEncoderJoystick12getIncrementEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cDevControlEncoderJoystick::getIncrement()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV26cDevControlEncoderJoystick)
</UL>
<P><STRONG><a name="[150]"></a>cDevControlEncoderJoystick::cDevControlEncoderJoystick(cDevDigital*, cDevDigital*, cDevDigital*, cHwTimer*, unsigned short)</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lib.o(i._ZN26cDevControlEncoderJoystickC1EP11cDevDigitalS1_S1_P8cHwTimert))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cDevControlEncoderJoystick::cDevControlEncoderJoystick(cDevDigital*, cDevDigital*, cDevDigital*, cHwTimer*, unsigned short) &rArr; cDevControlEncoder::cDevControlEncoder__sub_object(cDevDigital*, cHwTimer*) &rArr; operator new[] (unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::cDevControlEncoder__sub_object(cDevDigital*, cHwTimer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[1ba]"></a>cDevControlEncoderJoystick::cDevControlEncoderJoystick__sub_object(cDevDigital*, cDevDigital*, cDevDigital*, cHwTimer*, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lib.o(i._ZN26cDevControlEncoderJoystickC1EP11cDevDigitalS1_S1_P8cHwTimert), UNUSED)

<P><STRONG><a name="[151]"></a>GUI::drawString(Rect, unsigned short, unsigned short, const char*, ...)</STRONG> (Thumb, 106 bytes, Stack size 304 bytes, guilabel.o(i._ZN3GUI10drawStringE4RectttPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = GUI::drawString(Rect, unsigned short, unsigned short, const char*, ...) &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUILabel::onDraw(Rect)
</UL>

<P><STRONG><a name="[153]"></a>GUI::drawRectOutline(Rect, unsigned short, unsigned char)</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, guibutton.o(i._ZN3GUI15drawRectOutlineE4Rectth))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GUI::drawRectOutline(Rect, unsigned short, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISelect::updateSelected(GUIEvent::Event)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIButton::onEvent(GUIEvent::Event, Rect)
</UL>

<P><STRONG><a name="[120]"></a>Rect::Rect(int, int, int, int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i._ZN4RectC1Eiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Rect::Rect(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISelect::GUISelect(Rect, unsigned short, int, char*, ...)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPagedView::GUIPagedView(Rect, int, View*, ...)
</UL>

<P><STRONG><a name="[1bb]"></a>Rect::Rect__sub_object(int, int, int, int)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN4RectC1Eiiii), UNUSED)

<P><STRONG><a name="[4e]"></a>View::onLateDraw(Rect)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, view.o(i._ZN4View10onLateDrawE4Rect))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISelect::onLateDraw(Rect)
</UL>
<BR>[Address Reference Count : 5]<UL><LI> view.o(.constdata__ZTV4View)
<LI> guibutton.o(.constdata__ZTV9GUIButton)
<LI> guilabel.o(.constdata__ZTV8GUILabel)
<LI> guipagedview.o(.constdata__ZTV12GUIPagedView)
<LI> guimeasurement.o(.constdata__ZTV14GUIMeasurement)
</UL>
<P><STRONG><a name="[4a]"></a>View::shouldDraw(Rect)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, view.o(i._ZN4View10shouldDrawE4Rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = View::shouldDraw(Rect)
</UL>
<BR>[Address Reference Count : 6]<UL><LI> view.o(.constdata__ZTV4View)
<LI> guibutton.o(.constdata__ZTV9GUIButton)
<LI> guilabel.o(.constdata__ZTV8GUILabel)
<LI> guiselect.o(.constdata__ZTV9GUISelect)
<LI> guipagedview.o(.constdata__ZTV12GUIPagedView)
<LI> guimeasurement.o(.constdata__ZTV14GUIMeasurement)
</UL>
<P><STRONG><a name="[47]"></a>View::getIsHidden()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, view.o(i._ZN4View11getIsHiddenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = View::getIsHidden()
</UL>
<BR>[Address Reference Count : 6]<UL><LI> view.o(.constdata__ZTV4View)
<LI> guibutton.o(.constdata__ZTV9GUIButton)
<LI> guilabel.o(.constdata__ZTV8GUILabel)
<LI> guiselect.o(.constdata__ZTV9GUISelect)
<LI> guipagedview.o(.constdata__ZTV12GUIPagedView)
<LI> guimeasurement.o(.constdata__ZTV14GUIMeasurement)
</UL>
<P><STRONG><a name="[48]"></a>View::draw(Rect)</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, view.o(i._ZN4View4drawE4Rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = View::draw(Rect)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::getFirst()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::Item::getNext()
</UL>
<BR>[Address Reference Count : 6]<UL><LI> view.o(.constdata__ZTV4View)
<LI> guibutton.o(.constdata__ZTV9GUIButton)
<LI> guilabel.o(.constdata__ZTV8GUILabel)
<LI> guiselect.o(.constdata__ZTV9GUISelect)
<LI> guipagedview.o(.constdata__ZTV12GUIPagedView)
<LI> guimeasurement.o(.constdata__ZTV14GUIMeasurement)
</UL>
<P><STRONG><a name="[78]"></a>View::onDraw(Rect)</STRONG> (Thumb, 124 bytes, Stack size 80 bytes, view.o(i._ZN4View6onDrawE4Rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = View::onDraw(Rect)
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISelect::onDraw(Rect)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUILabel::onDraw(Rect)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIButton::onDraw(Rect)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> view.o(.constdata__ZTV4View)
</UL>
<P><STRONG><a name="[4b]"></a>View::redraw()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, view.o(i._ZN4View6redrawEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = View::redraw()
</UL>
<BR>[Address Reference Count : 6]<UL><LI> view.o(.constdata__ZTV4View)
<LI> guibutton.o(.constdata__ZTV9GUIButton)
<LI> guilabel.o(.constdata__ZTV8GUILabel)
<LI> guiselect.o(.constdata__ZTV9GUISelect)
<LI> guipagedview.o(.constdata__ZTV12GUIPagedView)
<LI> guimeasurement.o(.constdata__ZTV14GUIMeasurement)
</UL>
<P><STRONG><a name="[77]"></a>View::onEvent(GUIEvent::Event, Rect)</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, view.o(i._ZN4View7onEventEN8GUIEvent5EventE4Rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = View::onEvent(GUIEvent::Event, Rect)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::getFirst()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::Item::getNext()
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMeasurement::onEvent(GUIEvent::Event, Rect)
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPagedView::onEvent(GUIEvent::Event, Rect)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISelect::onEvent(GUIEvent::Event, Rect)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIButton::onEvent(GUIEvent::Event, Rect)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> view.o(.constdata__ZTV4View)
<LI> guilabel.o(.constdata__ZTV8GUILabel)
</UL>
<P><STRONG><a name="[123]"></a>View::addChild(IDrawable&)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(i._ZN4View8addChildER9IDrawable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = View::addChild(IDrawable&)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::add(cList::Item*)
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISelect::GUISelect(Rect, unsigned short, int, char*, ...)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIButton::GUIButton(Rect, unsigned short, char*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPagedView::GUIPagedView(Rect, int, View*, ...)
</UL>

<P><STRONG><a name="[11c]"></a>View::View(Rect, unsigned short)</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, main.o(i._ZN4ViewC1E4Rectt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = View::View(Rect, unsigned short) &rArr; cList::Item::Item(cList*)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::cList()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::Item::Item(cList*)
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISelect::GUISelect(Rect, unsigned short, int, char*, ...)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIButton::GUIButton(Rect, unsigned short, char*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUILabel::GUILabel(Rect, unsigned short, const char*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPagedView::GUIPagedView(Rect, int, View*, ...)
</UL>

<P><STRONG><a name="[1bc]"></a>View::View__sub_object(Rect, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, main.o(i._ZN4ViewC1E4Rectt), UNUSED)

<P><STRONG><a name="[11e]"></a>cList::add(cList::Item*)</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lib.o(i._ZN5cList3addEPNS_4ItemE))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::addChild(IDrawable&)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPagedView::GUIPagedView(Rect, int, View*, ...)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer::add(cList::Item*)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::Item::Item(cList*)
</UL>

<P><STRONG><a name="[90]"></a>cList::Item::update()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lib.o(i._ZN5cList4Item6updateEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN5cList4ItemE)
</UL>
<P><STRONG><a name="[155]"></a>cList::Item::getNext()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN5cList4Item7getNextEv))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISelect::updateSelected(GUIEvent::Event)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::onEvent(GUIEvent::Event, Rect)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::draw(Rect)
</UL>

<P><STRONG><a name="[141]"></a>cList::Item::Item(cList*)</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, lib.o(i._ZN5cList4ItemC1EPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cList::Item::Item(cList*)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::add(cList::Item*)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::View(Rect, unsigned short)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC::cHwADC__sub_object(unsigned char, cHwTimer*)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::cDevControlEncoder__sub_object(cDevDigital*, cHwTimer*)
</UL>

<P><STRONG><a name="[1bd]"></a>cList::Item::Item__sub_object(cList*)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, lib.o(i._ZN5cList4ItemC1EPS_), UNUSED)

<P><STRONG><a name="[154]"></a>cList::getFirst()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN5cList8getFirstEv))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISelect::updateSelected(GUIEvent::Event)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::onEvent(GUIEvent::Event, Rect)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::draw(Rect)
</UL>

<P><STRONG><a name="[15e]"></a>cList::updateAll()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lib.o(i._ZN5cList9updateAllEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cList::updateAll()
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer::isrHandler()
</UL>

<P><STRONG><a name="[10d]"></a>cList::cList()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN5cListC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::View(Rect, unsigned short)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPagedView::GUIPagedView(Rect, int, View*, ...)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[1be]"></a>cList::cList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lib.o(i._ZN5cListC1Ev), UNUSED)

<P><STRONG><a name="[11a]"></a>cList::operator [](unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib.o(i._ZN5cListixEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cList::operator [](unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPagedView::onEvent(GUIEvent::Event, Rect)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPagedView::onDraw(Rect)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPagedView::onEventHandle(IEventCaller*, GUIEvent::Event)
</UL>

<P><STRONG><a name="[7a]"></a>cHwADC::isr()</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lib.o(i._ZN6cHwADC3isrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwADC::isr()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV6cHwADC)
<LI> lib.o(.constdata__ZTV8cHwADC_0)
</UL>
<P><STRONG><a name="[79]"></a>cHwADC::update()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lib.o(i._ZN6cHwADC6updateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwADC::update()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV6cHwADC)
<LI> lib.o(.constdata__ZTV8cHwADC_0)
</UL>
<P><STRONG><a name="[156]"></a>cHwADC::cHwADC__sub_object(unsigned char, cHwTimer*)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lib.o(i._ZN6cHwADCC2EhP8cHwTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cHwADC::cHwADC__sub_object(unsigned char, cHwTimer*) &rArr; operator new[] (unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::Item::Item(cList*)
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC_0::cHwADC_0(cHwTimer*)
</UL>

<P><STRONG><a name="[15d]"></a>cHwDAC::cHwDAC__sub_object(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib.o(i._ZN6cHwDACC2Eh))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDAC_0::cHwDAC_0()
</UL>

<P><STRONG><a name="[94]"></a>cHwPort::Pin::clr()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lib.o(i._ZN7cHwPort3Pin3clrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwPort::Pin::clr()
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::start()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN7cHwPort3PinE)
</UL>
<P><STRONG><a name="[95]"></a>cHwPort::Pin::get()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lib.o(i._ZN7cHwPort3Pin3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwPort::Pin::get()
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::get()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN7cHwPort3PinE)
</UL>
<P><STRONG><a name="[93]"></a>cHwPort::Pin::set(bool)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lib.o(i._ZN7cHwPort3Pin3setEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwPort::Pin::set(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN7cHwPort3PinE)
</UL>
<P><STRONG><a name="[92]"></a>cHwPort::Pin::set()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lib.o(i._ZN7cHwPort3Pin3setEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwPort::Pin::set()
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::stop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN7cHwPort3PinE)
</UL>
<P><STRONG><a name="[91]"></a>cHwPort::Pin::setMode(cHwPort::Mode)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lib.o(i._ZN7cHwPort3Pin7setModeENS_4ModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwPort::Pin::setMode(cHwPort::Mode)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTVN7cHwPort3PinE)
</UL>
<P><STRONG><a name="[119]"></a>cHwPort::Pin::Pin(cHwPort&, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lib.o(i._ZN7cHwPort3PinC1ERS_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwPort::Pin::Pin(cHwPort&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::Device(cHwSPImaster&, cHwPort&, unsigned char)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[1bf]"></a>cHwPort::Pin::Pin__sub_object(cHwPort&, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, lib.o(i._ZN7cHwPort3PinC1ERS_h), UNUSED)

<P><STRONG><a name="[166]"></a>cHwPort::cHwPort__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN7cHwPortC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort_N::cHwPort_N(cHwPort_N::PortId)
</UL>

<P><STRONG><a name="[157]"></a>cSystem::delayMicroSec(unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lib.o(i._ZN7cSystem13delayMicroSecEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cSystem::delayMicroSec(unsigned short) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::delayMilliSec(unsigned short)
</UL>

<P><STRONG><a name="[145]"></a>cSystem::delayMilliSec(unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib.o(i._ZN7cSystem13delayMilliSecEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cSystem::delayMilliSec(unsigned short) &rArr; cSystem::delayMicroSec(unsigned short) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::delayMicroSec(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTouch_STMPE811i2c::cHwTouch_STMPE811i2c(cHwI2Cmaster&, unsigned char, unsigned short, unsigned short)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::init()
</UL>

<P><STRONG><a name="[15a]"></a>cSystem::disableWatchdog()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lib.o(i._ZN7cSystem15disableWatchdogEv))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::cSystem(unsigned char)
</UL>

<P><STRONG><a name="[125]"></a>cSystem::enableInterrupt()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lib.o(i._ZN7cSystem15enableInterruptEv))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::write(unsigned char*, unsigned short)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwI2Cmaster::write(unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwI2Cmaster::read(unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFifo&lang;cDevControlEncoder::tEvent&rang;::operator &lang;&lang;(const cDevControlEncoder::tEvent&)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFifo&lang;cDevControlEncoder::tEvent&rang;::isFull()
</UL>

<P><STRONG><a name="[124]"></a>cSystem::disableInterrupt()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lib.o(i._ZN7cSystem16disableInterruptEv))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::write(unsigned char*, unsigned short)
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwI2Cmaster::write(unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwI2Cmaster::read(unsigned char, unsigned char*, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFifo&lang;cDevControlEncoder::tEvent&rang;::operator &lang;&lang;(const cDevControlEncoder::tEvent&)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFifo&lang;cDevControlEncoder::tEvent&rang;::isFull()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::cSystem(unsigned char)
</UL>

<P><STRONG><a name="[158]"></a>cSystem::cSystem(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lib.o(i._ZN7cSystemC1Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cSystem::cSystem(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableWatchdog()
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[1c0]"></a>cSystem::cSystem__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, lib.o(i._ZN7cSystemC1Eh), UNUSED)

<P><STRONG><a name="[55]"></a>GUILabel::onDraw(Rect)</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, guilabel.o(i._ZN8GUILabel6onDrawE4Rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = GUILabel::onDraw(Rect) &rArr; GUI::drawString(Rect, unsigned short, unsigned short, const char*, ...) &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI::drawString(Rect, unsigned short, unsigned short, const char*, ...)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::onDraw(Rect)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> guilabel.o(.constdata__ZTV8GUILabel)
<LI> guimeasurement.o(.constdata__ZTV14GUIMeasurement)
</UL>
<P><STRONG><a name="[56]"></a>GUILabel::setTitle(const char*)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, guilabel.o(i._ZN8GUILabel8setTitleEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GUILabel::setTitle(const char*) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUILabel::GUILabel(Rect, unsigned short, const char*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> guilabel.o(.constdata__ZTV8GUILabel)
<LI> guimeasurement.o(.constdata__ZTV14GUIMeasurement)
</UL>
<P><STRONG><a name="[12f]"></a>GUILabel::GUILabel(Rect, unsigned short, const char*)</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, main.o(i._ZN8GUILabelC1E4RecttPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GUILabel::GUILabel(Rect, unsigned short, const char*) &rArr; GUILabel::setTitle(const char*) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUILabel::setTitle(const char*)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::View(Rect, unsigned short)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIButton::GUIButton(Rect, unsigned short, char*)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMeasurement::GUIMeasurement(Rect, unsigned short, char*, char*)
</UL>

<P><STRONG><a name="[1c1]"></a>GUILabel::GUILabel__sub_object(Rect, unsigned short, const char*)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, main.o(i._ZN8GUILabelC1E4RecttPKc), UNUSED)

<P><STRONG><a name="[7c]"></a>cHwADC_0::startCh(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwADC_07startChEh))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV8cHwADC_0)
</UL>
<P><STRONG><a name="[7b]"></a>cHwADC_0::getResult()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwADC_09getResultEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV8cHwADC_0)
</UL>
<P><STRONG><a name="[15b]"></a>cHwADC_0::cHwADC_0(cHwTimer*)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lib.o(i._ZN8cHwADC_0C1EP8cHwTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cHwADC_0::cHwADC_0(cHwTimer*) &rArr; cHwADC::cHwADC__sub_object(unsigned char, cHwTimer*) &rArr; operator new[] (unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ(IRQn)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC::cHwADC__sub_object(unsigned char, cHwTimer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[1c2]"></a>cHwADC_0::cHwADC_0__sub_object(cHwTimer*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lib.o(i._ZN8cHwADC_0C1EP8cHwTimer), UNUSED)

<P><STRONG><a name="[15c]"></a>cHwDAC_0::cHwDAC_0()</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lib.o(i._ZN8cHwDAC_0C1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = cHwDAC_0::cHwDAC_0() &rArr; cHwPinConfig::set(cHwPinConfig::Function, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPinConfig::set(cHwPinConfig::Function, unsigned)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDAC::cHwDAC__sub_object(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[1c3]"></a>cHwDAC_0::cHwDAC_0__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, lib.o(i._ZN8cHwDAC_0C1Ev), UNUSED)

<P><STRONG><a name="[40]"></a>cHwTimer::isrHandler()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lib.o(i._ZN8cHwTimer10isrHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cHwTimer::isrHandler() &rArr; cList::updateAll()
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::updateAll()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV8cHwTimer)
<LI> lib.o(.constdata__ZTV10cHwTimer_N)
</UL>
<P><STRONG><a name="[3e]"></a>cHwTimer::getCycleTime()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwTimer12getCycleTimeEv))
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV8cHwTimer)
<LI> lib.o(.constdata__ZTV10cHwTimer_N)
</UL>
<P><STRONG><a name="[3f]"></a>cHwTimer::add(cList::Item*)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, lib.o(i._ZN8cHwTimer3addEPN5cList4ItemE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cHwTimer::add(cList::Item*)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::add(cList::Item*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV8cHwTimer)
<LI> lib.o(.constdata__ZTV10cHwTimer_N)
</UL>
<P><STRONG><a name="[72]"></a>cHwTouch::getPosX()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwTouch7getPosXEv))
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV20cHwTouch_STMPE811i2c)
<LI> lib.o(.constdata__ZTV8cHwTouch)
</UL>
<P><STRONG><a name="[73]"></a>cHwTouch::getPosY()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwTouch7getPosYEv))
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV20cHwTouch_STMPE811i2c)
<LI> lib.o(.constdata__ZTV8cHwTouch)
</UL>
<P><STRONG><a name="[74]"></a>cHwTouch::isTouched()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwTouch9isTouchedEv))
<BR>[Address Reference Count : 2]<UL><LI> lib.o(.constdata__ZTV20cHwTouch_STMPE811i2c)
<LI> lib.o(.constdata__ZTV8cHwTouch)
</UL>
<P><STRONG><a name="[14e]"></a>cHwTouch::cHwTouch__sub_object(unsigned short, unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwTouchC2Ett))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTouch_STMPE811i2c::cHwTouch_STMPE811i2c(cHwI2Cmaster&, unsigned char, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[10b]"></a>cHwUSB_0::isr()</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, lib.o(i._ZN8cHwUSB_03isrEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cHwUSB_0::isr()
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::RdCmdDat(unsigned)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::WrCmd(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[15f]"></a>cHwUSB_0::WrCmd(unsigned)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwUSB_05WrCmdEj))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
</UL>

<P><STRONG><a name="[160]"></a>cHwUSB_0::RdCmdDat(unsigned)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lib.o(i._ZN8cHwUSB_08RdCmdDatEj))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwUSB_0::isr()
</UL>

<P><STRONG><a name="[7e]"></a>GUIButton::onDraw(Rect)</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, guibutton.o(i._ZN9GUIButton6onDrawE4Rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GUIButton::onDraw(Rect) &rArr; View::onDraw(Rect)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::onDraw(Rect)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guibutton.o(.constdata__ZTV9GUIButton)
</UL>
<P><STRONG><a name="[7d]"></a>GUIButton::onEvent(GUIEvent::Event, Rect)</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, guibutton.o(i._ZN9GUIButton7onEventEN8GUIEvent5EventE4Rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GUIButton::onEvent(GUIEvent::Event, Rect) &rArr; GUI::drawRectOutline(Rect, unsigned short, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI::drawRectOutline(Rect, unsigned short, unsigned char)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::onEvent(GUIEvent::Event, Rect)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guibutton.o(.constdata__ZTV9GUIButton)
</UL>
<P><STRONG><a name="[121]"></a>GUIButton::GUIButton(Rect, unsigned short, char*)</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, main.o(i._ZN9GUIButtonC1E4RecttPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GUIButton::GUIButton(Rect, unsigned short, char*) &rArr; GUILabel::GUILabel(Rect, unsigned short, const char*) &rArr; GUILabel::setTitle(const char*) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUILabel::GUILabel(Rect, unsigned short, const char*)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::View(Rect, unsigned short)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::addChild(IDrawable&)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEventCaller::IEventCaller()
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISelect::GUISelect(Rect, unsigned short, int, char*, ...)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPagedView::GUIPagedView(Rect, int, View*, ...)
</UL>

<P><STRONG><a name="[1c4]"></a>GUIButton::GUIButton__sub_object(Rect, unsigned short, char*)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, main.o(i._ZN9GUIButtonC1E4RecttPc), UNUSED)

<P><STRONG><a name="[81]"></a>GUISelect::onLateDraw(Rect)</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, guiselect.o(i._ZN9GUISelect10onLateDrawE4Rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GUISelect::onLateDraw(Rect) &rArr; GUISelect::updateSelected(GUIEvent::Event) &rArr; GUI::drawRectOutline(Rect, unsigned short, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISelect::updateSelected(GUIEvent::Event)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::onLateDraw(Rect)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiselect.o(.constdata__ZTV9GUISelect)
</UL>
<P><STRONG><a name="[82]"></a>GUISelect::onHandlerSet()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, guiselect.o(i._ZN9GUISelect12onHandlerSetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GUISelect::onHandlerSet() &rArr; IEventCaller::callHandler(GUIEvent::Event)
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEventCaller::callHandler(GUIEvent::Event)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-44} to GUISelect::onHandlerSet()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiselect.o(.constdata__ZTV9GUISelect)
</UL>
<P><STRONG><a name="[83]"></a>GUISelect::onEventHandle(IEventCaller*, GUIEvent::Event)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, guiselect.o(i._ZN9GUISelect13onEventHandleEP12IEventCallerN8GUIEvent5EventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GUISelect::onEventHandle(IEventCaller*, GUIEvent::Event) &rArr; GUISelect::updateSelected(GUIEvent::Event) &rArr; GUI::drawRectOutline(Rect, unsigned short, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISelect::updateSelected(GUIEvent::Event)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-40} to GUISelect::onEventHandle(IEventCaller*, GUIEvent::Event)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiselect.o(.constdata__ZTV9GUISelect)
</UL>
<P><STRONG><a name="[162]"></a>GUISelect::updateSelected(GUIEvent::Event)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, guiselect.o(i._ZN9GUISelect14updateSelectedEN8GUIEvent5EventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GUISelect::updateSelected(GUIEvent::Event) &rArr; GUI::drawRectOutline(Rect, unsigned short, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEventCaller::callHandler(GUIEvent::Event)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI::drawRectOutline(Rect, unsigned short, unsigned char)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::getFirst()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cList::Item::getNext()
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISelect::onEventHandle(IEventCaller*, GUIEvent::Event)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISelect::onLateDraw(Rect)
</UL>

<P><STRONG><a name="[80]"></a>GUISelect::onDraw(Rect)</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, guiselect.o(i._ZN9GUISelect6onDrawE4Rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GUISelect::onDraw(Rect) &rArr; View::onDraw(Rect)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::onDraw(Rect)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiselect.o(.constdata__ZTV9GUISelect)
</UL>
<P><STRONG><a name="[7f]"></a>GUISelect::onEvent(GUIEvent::Event, Rect)</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, guiselect.o(i._ZN9GUISelect7onEventEN8GUIEvent5EventE4Rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GUISelect::onEvent(GUIEvent::Event, Rect) &rArr; View::onEvent(GUIEvent::Event, Rect)
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::onEvent(GUIEvent::Event, Rect)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiselect.o(.constdata__ZTV9GUISelect)
</UL>
<P><STRONG><a name="[164]"></a>GUISelect::GUISelect(Rect, unsigned short, int, char*, ...)</STRONG> (Thumb, 234 bytes, Stack size 88 bytes, main.o(i._ZN9GUISelectC1E4RecttiPcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = GUISelect::GUISelect(Rect, unsigned short, int, char*, ...) &rArr; GUIButton::GUIButton(Rect, unsigned short, char*) &rArr; GUILabel::GUILabel(Rect, unsigned short, const char*) &rArr; GUILabel::setTitle(const char*) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIButton::GUIButton(Rect, unsigned short, char*)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::View(Rect, unsigned short)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::addChild(IDrawable&)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rect::Rect(int, int, int, int)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEventHandler::IEventHandler__sub_object()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEventCaller::IEventCaller()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEventCaller::setCustomHandler(IEventHandler*)
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c5]"></a>GUISelect::GUISelect__sub_object(Rect, unsigned short, int, char*, ...)</STRONG> (Thumb, 0 bytes, Stack size 88 bytes, main.o(i._ZN9GUISelectC1E4RecttiPcz), UNUSED)

<P><STRONG><a name="[86]"></a>IDrawable::getIsHidden()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i._ZN9IDrawable11getIsHiddenEv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTV9IDrawable)
</UL>
<P><STRONG><a name="[4c]"></a>IDrawable::onAddedToDrawable(IDrawable*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._ZN9IDrawable17onAddedToDrawableEPS_))
<BR>[Address Reference Count : 7]<UL><LI> view.o(.constdata__ZTV4View)
<LI> guibutton.o(.constdata__ZTV9GUIButton)
<LI> guilabel.o(.constdata__ZTV8GUILabel)
<LI> guiselect.o(.constdata__ZTV9GUISelect)
<LI> guipagedview.o(.constdata__ZTV12GUIPagedView)
<LI> guimeasurement.o(.constdata__ZTV14GUIMeasurement)
<LI> main.o(.constdata__ZTV9IDrawable)
</UL>
<P><STRONG><a name="[46]"></a>IDrawable::update()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._ZN9IDrawable6updateEv))
<BR>[Address Reference Count : 7]<UL><LI> view.o(.constdata__ZTV4View)
<LI> guibutton.o(.constdata__ZTV9GUIButton)
<LI> guilabel.o(.constdata__ZTV8GUILabel)
<LI> guiselect.o(.constdata__ZTV9GUISelect)
<LI> guipagedview.o(.constdata__ZTV12GUIPagedView)
<LI> guimeasurement.o(.constdata__ZTV14GUIMeasurement)
<LI> main.o(.constdata__ZTV9IDrawable)
</UL>
<P><STRONG><a name="[87]"></a>cHwPort_N::setPinMode(unsigned char, cHwPort::Mode)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lib.o(i._ZN9cHwPort_N10setPinModeEhN7cHwPort4ModeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cHwPort_N::setPinMode(unsigned char, cHwPort::Mode)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV9cHwPort_N)
</UL>
<P><STRONG><a name="[89]"></a>cHwPort_N::clr(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN9cHwPort_N3clrEj))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV9cHwPort_N)
</UL>
<P><STRONG><a name="[8a]"></a>cHwPort_N::get()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib.o(i._ZN9cHwPort_N3getEv))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV9cHwPort_N)
</UL>
<P><STRONG><a name="[88]"></a>cHwPort_N::set(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(i._ZN9cHwPort_N3setEj))
<BR>[Address Reference Count : 1]<UL><LI> lib.o(.constdata__ZTV9cHwPort_N)
</UL>
<P><STRONG><a name="[165]"></a>cHwPort_N::cHwPort_N(cHwPort_N::PortId)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lib.o(i._ZN9cHwPort_NC1ENS_6PortIdE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cHwPort_N::cHwPort_N(cHwPort_N::PortId)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::cHwPort__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp
</UL>

<P><STRONG><a name="[1c6]"></a>cHwPort_N::cHwPort_N__sub_object(cHwPort_N::PortId)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, lib.o(i._ZN9cHwPort_NC1ENS_6PortIdE), UNUSED)

<P><STRONG><a name="[132]"></a>cHwDisplayFont::getCharWidth() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib.o(i._ZNK14cHwDisplayFont12getCharWidthEv))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayFont::getPixel(unsigned char, unsigned char)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayGraphic::putChar(char)
</UL>

<P><STRONG><a name="[13b]"></a>cHwDisplayFont::getCharHeight() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib.o(i._ZNK14cHwDisplayFont13getCharHeightEv))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayGraphic::putChar(char)
</UL>

<P><STRONG><a name="[50]"></a>thunk{-40} to GUIPagedView::onEventHandle(IEventCaller*, GUIEvent::Event)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, guipagedview.o(i._ZThn40_N12GUIPagedView13onEventHandleEP12IEventCallerN8GUIEvent5EventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = thunk{-40} to GUIPagedView::onEventHandle(IEventCaller*, GUIEvent::Event) &rArr; GUIPagedView::onEventHandle(IEventCaller*, GUIEvent::Event) &rArr; cList::operator [](unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPagedView::onEventHandle(IEventCaller*, GUIEvent::Event)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guipagedview.o(.constdata__ZTV12GUIPagedView)
</UL>
<P><STRONG><a name="[84]"></a>thunk{-40} to GUISelect::onEventHandle(IEventCaller*, GUIEvent::Event)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, guiselect.o(i._ZThn40_N9GUISelect13onEventHandleEP12IEventCallerN8GUIEvent5EventE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = thunk{-40} to GUISelect::onEventHandle(IEventCaller*, GUIEvent::Event) &rArr; GUISelect::onEventHandle(IEventCaller*, GUIEvent::Event) &rArr; GUISelect::updateSelected(GUIEvent::Event) &rArr; GUI::drawRectOutline(Rect, unsigned short, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISelect::onEventHandle(IEventCaller*, GUIEvent::Event)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiselect.o(.constdata__ZTV9GUISelect)
</UL>
<P><STRONG><a name="[85]"></a>thunk{-44} to GUISelect::onHandlerSet()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, guiselect.o(i._ZThn44_N9GUISelect12onHandlerSetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = thunk{-44} to GUISelect::onHandlerSet() &rArr; GUISelect::onHandlerSet() &rArr; IEventCaller::callHandler(GUIEvent::Event)
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISelect::onHandlerSet()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> guiselect.o(.constdata__ZTV9GUISelect)
</UL>
<P><STRONG><a name="[142]"></a>operator new[] (unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new[] (unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC::cHwADC__sub_object(unsigned char, cHwTimer*)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::cDevControlEncoder__sub_object(cDevDigital*, cHwTimer*)
</UL>

<P><STRONG><a name="[11f]"></a>operator new(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISelect::GUISelect(Rect, unsigned short, int, char*, ...)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIButton::GUIButton(Rect, unsigned short, char*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPagedView::GUIPagedView(Rect, int, View*, ...)
</UL>

<P><STRONG><a name="[f3]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[152]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI::drawString(Rect, unsigned short, unsigned short, const char*, ...)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI::drawRectOutline(Rect, unsigned short, unsigned char)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::onDraw(Rect)
</UL>

<P><STRONG><a name="[3d]"></a>__cxa_pure_virtual</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __cxa_pure_virtual &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 13]<UL><LI> main.o(.constdata__ZTV9IDrawable)
<LI> main.o(.constdata__ZTV13IEventHandler)
<LI> lib.o(.constdata__ZTV8cHwTimer)
<LI> lib.o(.constdata__ZTV17cHwDisplayGraphic)
<LI> lib.o(.constdata__ZTV6cHwADC)
<LI> lib.o(.constdata__ZTV12cHwI2Cmaster)
<LI> lib.o(.constdata__ZTV18cDevControlEncoder)
<LI> lib.o(.constdata__ZTV6cHwDAC)
<LI> lib.o(.constdata__ZTV7cHwPort)
<LI> lib.o(.constdata__ZTV10cHwDisplay)
<LI> lib.o(.constdata__ZTV12cHwSPImaster)
<LI> lib.o(.constdata__ZTV8cHwTouch)
<LI> lib.o(.constdata__ZTV11cDevDisplay)
</UL>
<P><STRONG><a name="[e2]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[cd]"></a>main</STRONG> (Thumb, 600 bytes, Stack size 104 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = main &rArr; GUIMeasurement::GUIMeasurement(Rect, unsigned short, char*, char*) &rArr; GUIMeasurement::setValue(const char*) &rArr; GUIMeasurement::setText(const char*) &rArr; GUIMeasurement::setText(char*, char*, const char*) &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMeasurement::setValue(int)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIControls::update()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUISelect::GUISelect(Rect, unsigned short, int, char*, ...)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIButton::GUIButton(Rect, unsigned short, char*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUILabel::GUILabel(Rect, unsigned short, const char*)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::View(Rect, unsigned short)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;View::addChild(IDrawable&)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rect::Rect(int, int, int, int)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIMeasurement::GUIMeasurement(Rect, unsigned short, char*, char*)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEventHandler::IEventHandler__sub_object()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IEventCaller::setCustomHandler(IEventHandler*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUIPagedView::GUIPagedView(Rect, int, View*, ...)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplayGraphic::cDevDisplayGraphic(cHwDisplayGraphic&)
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c6]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[3c]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[14c]"></a>RANGE&lang;int&rang;(T1, T1, T1)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lib.o(t._Z5RANGEIiET_S0_S0_S0_))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTouch_STMPE811i2c::update()
</UL>

<P><STRONG><a name="[13e]"></a>cFifo&lang;cDevControlEncoder::tEvent&rang;::isFull()</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, lib.o(t._ZN5cFifoIN18cDevControlEncoder6tEventEE6isFullEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cFifo&lang;cDevControlEncoder::tEvent&rang;::isFull()
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::enableInterrupt()
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::update()
</UL>

<P><STRONG><a name="[13f]"></a>cFifo&lang;cDevControlEncoder::tEvent&rang;::operator &lang;&lang;(const cDevControlEncoder::tEvent&)</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, lib.o(t._ZN5cFifoIN18cDevControlEncoder6tEventEElsERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cFifo&lang;cDevControlEncoder::tEvent&rang;::operator &lang;&lang;(const cDevControlEncoder::tEvent&)
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::disableInterrupt()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::enableInterrupt()
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoder::update()
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[16a]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::delayMicroSec(unsigned short)
</UL>

<P><STRONG><a name="[16d]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::delayMicroSec(unsigned short)
</UL>

<P><STRONG><a name="[1c7]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[115]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::delayMicroSec(unsigned short)
</UL>

<P><STRONG><a name="[16e]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[16c]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[16b]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[174]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[16f]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[172]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[1c8]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[1c9]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[173]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[177]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[175]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[171]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[170]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
</UL>

<P><STRONG><a name="[176]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[a5]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[10e]"></a>NVIC_EnableIRQ(IRQn)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lib.o(i._Z14NVIC_EnableIRQ4IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC_0::cHwADC_0(cHwTimer*)
</UL>

<P><STRONG><a name="[96]"></a>__sti___8_main_cpp</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, main.o(i.__sti___8_main_cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __sti___8_main_cpp &rArr; cHwDisp_SPFD5408Bspi::cHwDisp_SPFD5408Bspi(cHwSPImaster::Device&, cHwPort::Pin&, cHwDisplayFont, unsigned char) &rArr; cHwDisp_SPFD5408Bspi::init() &rArr; cHwDisp_SPFD5408Bspi::maxWindow() &rArr; cHwDisp_SPFD5408Bspi::writeReg(unsigned char, unsigned short) &rArr; cHwDisp_SPFD5408Bspi::writeDat(unsigned short) &rArr; cHwSPImaster::Device::write(unsigned char*, unsigned short) &rArr; cHwSPImaster::Device::start() &rArr; cHwPort::Pin::clr()
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster::Device::Device(cHwSPImaster&, cHwPort&, unsigned char)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDisplayChar::cDevDisplayChar(cHwDisplay&)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwSPImaster_1::cHwSPImaster_1(cHwSPImaster::MODE, cHwSPImaster::ClockPolPha)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwI2Cmaster_N::cHwI2Cmaster_N(cHwI2Cmaster_N::I2C_ID, cHwI2Cmaster::MODE, unsigned char)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisplayFont::cHwDisplayFont(const cHwDisplayFontProperties*, const unsigned char*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevDigital::cDevDigital(cHwPort&, unsigned char, cDevDigital::Mode, bool)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTimer_N::cHwTimer_N(cHwTimer_N::TimerId, unsigned)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort_N::cHwPort_N(cHwPort_N::PortId)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDAC_0::cHwDAC_0()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwADC_0::cHwADC_0(cHwTimer*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cSystem::cSystem(unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwPort::Pin::Pin(cHwPort&, unsigned char)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDevControlEncoderJoystick::cDevControlEncoderJoystick(cDevDigital*, cDevDigital*, cDevDigital*, cHwTimer*, unsigned short)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwTouch_STMPE811i2c::cHwTouch_STMPE811i2c(cHwI2Cmaster&, unsigned char, unsigned short, unsigned short)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cHwDisp_SPFD5408Bspi::cHwDisp_SPFD5408Bspi(cHwSPImaster::Device&, cHwPort::Pin&, cHwDisplayFont, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[97]"></a>__sti___7_GUI_cpp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gui.o(i.__sti___7_GUI_cpp))
<BR>[Address Reference Count : 1]<UL><LI> gui.o(.init_array)
</UL>
<P><STRONG><a name="[ec]"></a>_fp_digits</STRONG> (Thumb, 426 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[3b]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
